{"repo": "khennig/jpql-querybuilder", "path": "src/main/java/com/tri/persistence/jpql/SelectQueryClause.java", "func_name": "SelectQueryClause.add", "original_string": "public <T> QueryBuilder add(final String lhsStatement,\n\t\t\tfinal Class<T> constructorClass, final String expression) {\n\n\t\tStringBuilder itemBuilder = new StringBuilder();\n\t\tif (lhsStatement != null) {\n\t\t\titemBuilder.append(lhsStatement);\n\t\t\titemBuilder.append(\" \");\n\t\t}\n\t\titemBuilder.append(\"NEW \");\n\t\titemBuilder.append(constructorClass.getName());\n\t\titemBuilder.append(\"(\");\n\t\titemBuilder.append(expression);\n\t\titemBuilder.append(\")\");\n\n\t\titems.add(itemBuilder.toString());\n\n\t\treturn builder;\n\n\t}", "language": "java", "code": "public <T> QueryBuilder add(final String lhsStatement,\n\t\t\tfinal Class<T> constructorClass, final String expression) {\n\n\t\tStringBuilder itemBuilder = new StringBuilder();\n\t\tif (lhsStatement != null) {\n\t\t\titemBuilder.append(lhsStatement);\n\t\t\titemBuilder.append(\" \");\n\t\t}\n\t\titemBuilder.append(\"NEW \");\n\t\titemBuilder.append(constructorClass.getName());\n\t\titemBuilder.append(\"(\");\n\t\titemBuilder.append(expression);\n\t\titemBuilder.append(\")\");\n\n\t\titems.add(itemBuilder.toString());\n\n\t\treturn builder;\n\n\t}", "code_tokens": ["public", "<", "T", ">", "QueryBuilder", "add", "(", "final", "String", "lhsStatement", ",", "final", "Class", "<", "T", ">", "constructorClass", ",", "final", "String", "expression", ")", "{", "StringBuilder", "itemBuilder", "=", "new", "StringBuilder", "(", ")", ";", "if", "(", "lhsStatement", "!=", "null", ")", "{", "itemBuilder", ".", "append", "(", "lhsStatement", ")", ";", "itemBuilder", ".", "append", "(", "\" \"", ")", ";", "}", "itemBuilder", ".", "append", "(", "\"NEW \"", ")", ";", "itemBuilder", ".", "append", "(", "constructorClass", ".", "getName", "(", ")", ")", ";", "itemBuilder", ".", "append", "(", "\"(\"", ")", ";", "itemBuilder", ".", "append", "(", "expression", ")", ";", "itemBuilder", ".", "append", "(", "\")\"", ")", ";", "items", ".", "add", "(", "itemBuilder", ".", "toString", "(", ")", ")", ";", "return", "builder", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "61206f7c42631c67a49603b9beddccf48a8112e8", "url": "https://github.com/khennig/jpql-querybuilder/blob/61206f7c42631c67a49603b9beddccf48a8112e8/src/main/java/com/tri/persistence/jpql/SelectQueryClause.java#L52-L70", "partition": "test"}
{"repo": "google/guice", "path": "core/src/com/google/inject/util/Types.java", "func_name": "Types.newParameterizedTypeWithOwner", "original_string": "public static ParameterizedType newParameterizedTypeWithOwner(\n      Type ownerType, Type rawType, Type... typeArguments) {\n    return new ParameterizedTypeImpl(ownerType, rawType, typeArguments);\n  }", "language": "java", "code": "public static ParameterizedType newParameterizedTypeWithOwner(\n      Type ownerType, Type rawType, Type... typeArguments) {\n    return new ParameterizedTypeImpl(ownerType, rawType, typeArguments);\n  }", "code_tokens": ["public", "static", "ParameterizedType", "newParameterizedTypeWithOwner", "(", "Type", "ownerType", ",", "Type", "rawType", ",", "Type", "...", "typeArguments", ")", "{", "return", "new", "ParameterizedTypeImpl", "(", "ownerType", ",", "rawType", ",", "typeArguments", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "a0552a16d813ead98fe73737fb001db336650251", "url": "https://github.com/google/guice/blob/a0552a16d813ead98fe73737fb001db336650251/core/src/com/google/inject/util/Types.java#L58-L61", "partition": "test"}
{"repo": "NitorCreations/willow", "path": "willow-utils/src/main/java/com/btr/proxy/selector/pac/PacScriptMethods.java", "func_name": "PacScriptMethods.isInNet", "original_string": "@Override\n  public boolean isInNet(String host, String pattern, String mask) {\n    host = dnsResolve(host);\n    if (host == null || host.length() == 0) {\n      return false;\n    }\n    long lhost = parseIpAddressToLong(host);\n    long lpattern = parseIpAddressToLong(pattern);\n    long lmask = parseIpAddressToLong(mask);\n    return (lhost & lmask) == lpattern;\n  }", "language": "java", "code": "@Override\n  public boolean isInNet(String host, String pattern, String mask) {\n    host = dnsResolve(host);\n    if (host == null || host.length() == 0) {\n      return false;\n    }\n    long lhost = parseIpAddressToLong(host);\n    long lpattern = parseIpAddressToLong(pattern);\n    long lmask = parseIpAddressToLong(mask);\n    return (lhost & lmask) == lpattern;\n  }", "code_tokens": ["@", "Override", "public", "boolean", "isInNet", "(", "String", "host", ",", "String", "pattern", ",", "String", "mask", ")", "{", "host", "=", "dnsResolve", "(", "host", ")", ";", "if", "(", "host", "==", "null", "||", "host", ".", "length", "(", ")", "==", "0", ")", "{", "return", "false", ";", "}", "long", "lhost", "=", "parseIpAddressToLong", "(", "host", ")", ";", "long", "lpattern", "=", "parseIpAddressToLong", "(", "pattern", ")", ";", "long", "lmask", "=", "parseIpAddressToLong", "(", "mask", ")", ";", "return", "(", "lhost", "&", "lmask", ")", "==", "lpattern", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "914911697426b5b95756a099de373438ffa12026", "url": "https://github.com/NitorCreations/willow/blob/914911697426b5b95756a099de373438ffa12026/willow-utils/src/main/java/com/btr/proxy/selector/pac/PacScriptMethods.java#L131-L141", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/net/InternetDomainName.java", "func_name": "InternetDomainName.validatePart", "original_string": "private static boolean validatePart(String part, boolean isFinalPart) {\n\n    // These tests could be collapsed into one big boolean expression, but\n    // they have been left as independent tests for clarity.\n\n    if (part.length() < 1 || part.length() > MAX_DOMAIN_PART_LENGTH) {\n      return false;\n    }\n\n    /*\n     * GWT claims to support java.lang.Character's char-classification methods, but it actually only\n     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this\n     * seems to be documented is here:\n     * http://osdir.com/ml/GoogleWebToolkitContributors/2010-03/msg00178.html\n     *\n     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also\n     * being allowed due to widespread practice.\n     */\n\n    String asciiChars = CharMatcher.ascii().retainFrom(part);\n\n    if (!PART_CHAR_MATCHER.matchesAllOf(asciiChars)) {\n      return false;\n    }\n\n    // No initial or final dashes or underscores.\n\n    if (DASH_MATCHER.matches(part.charAt(0))\n        || DASH_MATCHER.matches(part.charAt(part.length() - 1))) {\n      return false;\n    }\n\n    /*\n     * Note that we allow (in contravention of a strict interpretation of the relevant RFCs) domain\n     * parts other than the last may begin with a digit (for example, \"3com.com\"). It's important to\n     * disallow an initial digit in the last part; it's the only thing that stops an IPv4 numeric\n     * address like 127.0.0.1 from looking like a valid domain name.\n     */\n\n    if (isFinalPart && CharMatcher.digit().matches(part.charAt(0))) {\n      return false;\n    }\n\n    return true;\n  }", "language": "java", "code": "private static boolean validatePart(String part, boolean isFinalPart) {\n\n    // These tests could be collapsed into one big boolean expression, but\n    // they have been left as independent tests for clarity.\n\n    if (part.length() < 1 || part.length() > MAX_DOMAIN_PART_LENGTH) {\n      return false;\n    }\n\n    /*\n     * GWT claims to support java.lang.Character's char-classification methods, but it actually only\n     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this\n     * seems to be documented is here:\n     * http://osdir.com/ml/GoogleWebToolkitContributors/2010-03/msg00178.html\n     *\n     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also\n     * being allowed due to widespread practice.\n     */\n\n    String asciiChars = CharMatcher.ascii().retainFrom(part);\n\n    if (!PART_CHAR_MATCHER.matchesAllOf(asciiChars)) {\n      return false;\n    }\n\n    // No initial or final dashes or underscores.\n\n    if (DASH_MATCHER.matches(part.charAt(0))\n        || DASH_MATCHER.matches(part.charAt(part.length() - 1))) {\n      return false;\n    }\n\n    /*\n     * Note that we allow (in contravention of a strict interpretation of the relevant RFCs) domain\n     * parts other than the last may begin with a digit (for example, \"3com.com\"). It's important to\n     * disallow an initial digit in the last part; it's the only thing that stops an IPv4 numeric\n     * address like 127.0.0.1 from looking like a valid domain name.\n     */\n\n    if (isFinalPart && CharMatcher.digit().matches(part.charAt(0))) {\n      return false;\n    }\n\n    return true;\n  }", "code_tokens": ["private", "static", "boolean", "validatePart", "(", "String", "part", ",", "boolean", "isFinalPart", ")", "{", "// These tests could be collapsed into one big boolean expression, but", "// they have been left as independent tests for clarity.", "if", "(", "part", ".", "length", "(", ")", "<", "1", "||", "part", ".", "length", "(", ")", ">", "MAX_DOMAIN_PART_LENGTH", ")", "{", "return", "false", ";", "}", "/*\n     * GWT claims to support java.lang.Character's char-classification methods, but it actually only\n     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this\n     * seems to be documented is here:\n     * http://osdir.com/ml/GoogleWebToolkitContributors/2010-03/msg00178.html\n     *\n     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also\n     * being allowed due to widespread practice.\n     */", "String", "asciiChars", "=", "CharMatcher", ".", "ascii", "(", ")", ".", "retainFrom", "(", "part", ")", ";", "if", "(", "!", "PART_CHAR_MATCHER", ".", "matchesAllOf", "(", "asciiChars", ")", ")", "{", "return", "false", ";", "}", "// No initial or final dashes or underscores.", "if", "(", "DASH_MATCHER", ".", "matches", "(", "part", ".", "charAt", "(", "0", ")", ")", "||", "DASH_MATCHER", ".", "matches", "(", "part", ".", "charAt", "(", "part", ".", "length", "(", ")", "-", "1", ")", ")", ")", "{", "return", "false", ";", "}", "/*\n     * Note that we allow (in contravention of a strict interpretation of the relevant RFCs) domain\n     * parts other than the last may begin with a digit (for example, \"3com.com\"). It's important to\n     * disallow an initial digit in the last part; it's the only thing that stops an IPv4 numeric\n     * address like 127.0.0.1 from looking like a valid domain name.\n     */", "if", "(", "isFinalPart", "&&", "CharMatcher", ".", "digit", "(", ")", ".", "matches", "(", "part", ".", "charAt", "(", "0", ")", ")", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/net/InternetDomainName.java#L251-L295", "partition": "valid"}
{"repo": "TeachingKidsProgramming/TeachingKidsProgramming.Source.Java", "path": "src/main/java/org/teachingkidsprogramming/section07objects/DeepDive07Objects.java", "func_name": "DeepDive07Objects.throwPizzaParty", "original_string": "private Tortoise[] throwPizzaParty()\n  {\n    Tortoise karai = new Tortoise();\n    Tortoise cecil = new Tortoise();\n    Tortoise michealangelo = new Tortoise();\n    Tortoise fred = new Tortoise();\n    return new Tortoise[]{karai, cecil, michealangelo, fred};\n  }", "language": "java", "code": "private Tortoise[] throwPizzaParty()\n  {\n    Tortoise karai = new Tortoise();\n    Tortoise cecil = new Tortoise();\n    Tortoise michealangelo = new Tortoise();\n    Tortoise fred = new Tortoise();\n    return new Tortoise[]{karai, cecil, michealangelo, fred};\n  }", "code_tokens": ["private", "Tortoise", "[", "]", "throwPizzaParty", "(", ")", "{", "Tortoise", "karai", "=", "new", "Tortoise", "(", ")", ";", "Tortoise", "cecil", "=", "new", "Tortoise", "(", ")", ";", "Tortoise", "michealangelo", "=", "new", "Tortoise", "(", ")", ";", "Tortoise", "fred", "=", "new", "Tortoise", "(", ")", ";", "return", "new", "Tortoise", "[", "]", "{", "karai", ",", "cecil", ",", "michealangelo", ",", "fred", "}", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "516fee15e537ecdb3f4dcbe3695c5cfde7e930da", "url": "https://github.com/TeachingKidsProgramming/TeachingKidsProgramming.Source.Java/blob/516fee15e537ecdb3f4dcbe3695c5cfde7e930da/src/main/java/org/teachingkidsprogramming/section07objects/DeepDive07Objects.java#L145-L152", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiLocal.java", "func_name": "OSBTreeBonsaiLocal.clear", "original_string": "@Override\n  public void clear() throws IOException {\n    boolean rollback = false;\n    final OAtomicOperation atomicOperation = startAtomicOperation(true);\n    try {\n      final Lock lock = FILE_LOCK_MANAGER.acquireExclusiveLock(fileId);\n      try {\n        final Queue<OBonsaiBucketPointer> subTreesToDelete = new LinkedList<>();\n\n        final OCacheEntry cacheEntry = loadPageForWrite(atomicOperation, fileId, rootBucketPointer.getPageIndex(), false, true);\n        try {\n          OSBTreeBonsaiBucket<K, V> rootBucket = new OSBTreeBonsaiBucket<>(cacheEntry, rootBucketPointer.getPageOffset(),\n              keySerializer, valueSerializer, this);\n\n          addChildrenToQueue(subTreesToDelete, rootBucket);\n\n          rootBucket.shrink(0);\n          rootBucket = new OSBTreeBonsaiBucket<>(cacheEntry, rootBucketPointer.getPageOffset(), true, keySerializer,\n              valueSerializer, this);\n\n          rootBucket.setTreeSize(0);\n        } finally {\n          releasePageFromWrite(atomicOperation, cacheEntry);\n        }\n\n        recycleSubTrees(subTreesToDelete, atomicOperation);\n      } finally {\n        lock.unlock();\n      }\n    } catch (final Exception e) {\n      rollback = true;\n      throw e;\n    } finally {\n      endAtomicOperation(rollback);\n    }\n  }", "language": "java", "code": "@Override\n  public void clear() throws IOException {\n    boolean rollback = false;\n    final OAtomicOperation atomicOperation = startAtomicOperation(true);\n    try {\n      final Lock lock = FILE_LOCK_MANAGER.acquireExclusiveLock(fileId);\n      try {\n        final Queue<OBonsaiBucketPointer> subTreesToDelete = new LinkedList<>();\n\n        final OCacheEntry cacheEntry = loadPageForWrite(atomicOperation, fileId, rootBucketPointer.getPageIndex(), false, true);\n        try {\n          OSBTreeBonsaiBucket<K, V> rootBucket = new OSBTreeBonsaiBucket<>(cacheEntry, rootBucketPointer.getPageOffset(),\n              keySerializer, valueSerializer, this);\n\n          addChildrenToQueue(subTreesToDelete, rootBucket);\n\n          rootBucket.shrink(0);\n          rootBucket = new OSBTreeBonsaiBucket<>(cacheEntry, rootBucketPointer.getPageOffset(), true, keySerializer,\n              valueSerializer, this);\n\n          rootBucket.setTreeSize(0);\n        } finally {\n          releasePageFromWrite(atomicOperation, cacheEntry);\n        }\n\n        recycleSubTrees(subTreesToDelete, atomicOperation);\n      } finally {\n        lock.unlock();\n      }\n    } catch (final Exception e) {\n      rollback = true;\n      throw e;\n    } finally {\n      endAtomicOperation(rollback);\n    }\n  }", "code_tokens": ["@", "Override", "public", "void", "clear", "(", ")", "throws", "IOException", "{", "boolean", "rollback", "=", "false", ";", "final", "OAtomicOperation", "atomicOperation", "=", "startAtomicOperation", "(", "true", ")", ";", "try", "{", "final", "Lock", "lock", "=", "FILE_LOCK_MANAGER", ".", "acquireExclusiveLock", "(", "fileId", ")", ";", "try", "{", "final", "Queue", "<", "OBonsaiBucketPointer", ">", "subTreesToDelete", "=", "new", "LinkedList", "<>", "(", ")", ";", "final", "OCacheEntry", "cacheEntry", "=", "loadPageForWrite", "(", "atomicOperation", ",", "fileId", ",", "rootBucketPointer", ".", "getPageIndex", "(", ")", ",", "false", ",", "true", ")", ";", "try", "{", "OSBTreeBonsaiBucket", "<", "K", ",", "V", ">", "rootBucket", "=", "new", "OSBTreeBonsaiBucket", "<>", "(", "cacheEntry", ",", "rootBucketPointer", ".", "getPageOffset", "(", ")", ",", "keySerializer", ",", "valueSerializer", ",", "this", ")", ";", "addChildrenToQueue", "(", "subTreesToDelete", ",", "rootBucket", ")", ";", "rootBucket", ".", "shrink", "(", "0", ")", ";", "rootBucket", "=", "new", "OSBTreeBonsaiBucket", "<>", "(", "cacheEntry", ",", "rootBucketPointer", ".", "getPageOffset", "(", ")", ",", "true", ",", "keySerializer", ",", "valueSerializer", ",", "this", ")", ";", "rootBucket", ".", "setTreeSize", "(", "0", ")", ";", "}", "finally", "{", "releasePageFromWrite", "(", "atomicOperation", ",", "cacheEntry", ")", ";", "}", "recycleSubTrees", "(", "subTreesToDelete", ",", "atomicOperation", ")", ";", "}", "finally", "{", "lock", ".", "unlock", "(", ")", ";", "}", "}", "catch", "(", "final", "Exception", "e", ")", "{", "rollback", "=", "true", ";", "throw", "e", ";", "}", "finally", "{", "endAtomicOperation", "(", "rollback", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/storage/index/sbtreebonsai/local/OSBTreeBonsaiLocal.java#L272-L307", "partition": "test"}
{"repo": "Unidata/thredds", "path": "visad/src/main/java/ucar/nc2/iosp/gempak/GempakUtil.java", "func_name": "GempakUtil.TI_ITOC", "original_string": "public static String TI_ITOC(int[] idtarr) {\r\n        String dattim;\r\n        String date, time;\r\n\r\n        //   Put array values into variables.\r\n\r\n        int iyear  = idtarr[0];\r\n        int imonth = idtarr[1];\r\n        int iday   = idtarr[2];\r\n        int ihour  = idtarr[3];\r\n        int iminut = idtarr[4];\r\n\r\n        //  Check for leap year.\r\n\r\n        //int ndays = TI_DAYM(iyear, imonth);\r\n        iyear = iyear % 100;\r\n\r\n        //  Check that each of these values is valid.\r\n\r\n        /*  TODO: Check these\r\n            IF  ( iyear .lt. 0 )  iret = -7\r\n            IF  ( ( imonth .lt. 1 ) .or. ( imonth .gt. 12 ) ) iret = -8\r\n            IF  ( ( iday   .lt. 1 ) .or. ( iday   .gt. ndays ) )\r\n         +                                                    iret = -9\r\n            IF  ( ( ihour  .lt. 0 ) .or. ( ihour  .gt. 24 ) ) iret = -10\r\n            IF  ( ( iminut .lt. 0 ) .or. ( iminut .gt. 60 ) ) iret = -11\r\n            IF  ( iret .ne. 0 )  RETURN\r\n        */\r\n\r\n        //  Get the date and time.\r\n\r\n        int idate = iyear * 10000 + imonth * 100 + iday;\r\n        int itime = ihour * 100 + iminut;\r\n\r\n        //  Convert date and time to character strings.\r\n        //  Fill in blanks with zeroes.\r\n        date   = StringUtil2.padZero(idate, 6);\r\n        time   = StringUtil2.padZero(itime, 4);\r\n\r\n        dattim = date + \"/\" + time;\r\n\r\n        return dattim;\r\n    }", "language": "java", "code": "public static String TI_ITOC(int[] idtarr) {\r\n        String dattim;\r\n        String date, time;\r\n\r\n        //   Put array values into variables.\r\n\r\n        int iyear  = idtarr[0];\r\n        int imonth = idtarr[1];\r\n        int iday   = idtarr[2];\r\n        int ihour  = idtarr[3];\r\n        int iminut = idtarr[4];\r\n\r\n        //  Check for leap year.\r\n\r\n        //int ndays = TI_DAYM(iyear, imonth);\r\n        iyear = iyear % 100;\r\n\r\n        //  Check that each of these values is valid.\r\n\r\n        /*  TODO: Check these\r\n            IF  ( iyear .lt. 0 )  iret = -7\r\n            IF  ( ( imonth .lt. 1 ) .or. ( imonth .gt. 12 ) ) iret = -8\r\n            IF  ( ( iday   .lt. 1 ) .or. ( iday   .gt. ndays ) )\r\n         +                                                    iret = -9\r\n            IF  ( ( ihour  .lt. 0 ) .or. ( ihour  .gt. 24 ) ) iret = -10\r\n            IF  ( ( iminut .lt. 0 ) .or. ( iminut .gt. 60 ) ) iret = -11\r\n            IF  ( iret .ne. 0 )  RETURN\r\n        */\r\n\r\n        //  Get the date and time.\r\n\r\n        int idate = iyear * 10000 + imonth * 100 + iday;\r\n        int itime = ihour * 100 + iminut;\r\n\r\n        //  Convert date and time to character strings.\r\n        //  Fill in blanks with zeroes.\r\n        date   = StringUtil2.padZero(idate, 6);\r\n        time   = StringUtil2.padZero(itime, 4);\r\n\r\n        dattim = date + \"/\" + time;\r\n\r\n        return dattim;\r\n    }", "code_tokens": ["public", "static", "String", "TI_ITOC", "(", "int", "[", "]", "idtarr", ")", "{", "String", "dattim", ";", "String", "date", ",", "time", ";", "//   Put array values into variables.\r", "int", "iyear", "=", "idtarr", "[", "0", "]", ";", "int", "imonth", "=", "idtarr", "[", "1", "]", ";", "int", "iday", "=", "idtarr", "[", "2", "]", ";", "int", "ihour", "=", "idtarr", "[", "3", "]", ";", "int", "iminut", "=", "idtarr", "[", "4", "]", ";", "//  Check for leap year.\r", "//int ndays = TI_DAYM(iyear, imonth);\r", "iyear", "=", "iyear", "%", "100", ";", "//  Check that each of these values is valid.\r", "/*  TODO: Check these\r\n            IF  ( iyear .lt. 0 )  iret = -7\r\n            IF  ( ( imonth .lt. 1 ) .or. ( imonth .gt. 12 ) ) iret = -8\r\n            IF  ( ( iday   .lt. 1 ) .or. ( iday   .gt. ndays ) )\r\n         +                                                    iret = -9\r\n            IF  ( ( ihour  .lt. 0 ) .or. ( ihour  .gt. 24 ) ) iret = -10\r\n            IF  ( ( iminut .lt. 0 ) .or. ( iminut .gt. 60 ) ) iret = -11\r\n            IF  ( iret .ne. 0 )  RETURN\r\n        */", "//  Get the date and time.\r", "int", "idate", "=", "iyear", "*", "10000", "+", "imonth", "*", "100", "+", "iday", ";", "int", "itime", "=", "ihour", "*", "100", "+", "iminut", ";", "//  Convert date and time to character strings.\r", "//  Fill in blanks with zeroes.\r", "date", "=", "StringUtil2", ".", "padZero", "(", "idate", ",", "6", ")", ";", "time", "=", "StringUtil2", ".", "padZero", "(", "itime", ",", "4", ")", ";", "dattim", "=", "date", "+", "\"/\"", "+", "time", ";", "return", "dattim", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/visad/src/main/java/ucar/nc2/iosp/gempak/GempakUtil.java#L184-L226", "partition": "test"}
{"repo": "jboss/jboss-common-core", "path": "src/main/java/org/jboss/util/property/PropertyManager.java", "func_name": "PropertyManager.getDefaultPropertyMap", "original_string": "public static PropertyMap getDefaultPropertyMap()\n   {\n      SecurityManager sm = System.getSecurityManager();\n      if (sm != null)\n         sm.checkPropertiesAccess();\n      return props;\n   }", "language": "java", "code": "public static PropertyMap getDefaultPropertyMap()\n   {\n      SecurityManager sm = System.getSecurityManager();\n      if (sm != null)\n         sm.checkPropertiesAccess();\n      return props;\n   }", "code_tokens": ["public", "static", "PropertyMap", "getDefaultPropertyMap", "(", ")", "{", "SecurityManager", "sm", "=", "System", ".", "getSecurityManager", "(", ")", ";", "if", "(", "sm", "!=", "null", ")", "sm", ".", "checkPropertiesAccess", "(", ")", ";", "return", "props", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "c191bb18db83fa106c6913cf34ed47989b65dc97", "url": "https://github.com/jboss/jboss-common-core/blob/c191bb18db83fa106c6913cf34ed47989b65dc97/src/main/java/org/jboss/util/property/PropertyManager.java#L108-L114", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Flowable.java", "func_name": "Flowable.replay", "original_string": "@CheckReturnValue\n    @BackpressureSupport(BackpressureKind.FULL)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final ConnectableFlowable<T> replay() {\n        return FlowableReplay.createFrom(this);\n    }", "language": "java", "code": "@CheckReturnValue\n    @BackpressureSupport(BackpressureKind.FULL)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final ConnectableFlowable<T> replay() {\n        return FlowableReplay.createFrom(this);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "BackpressureSupport", "(", "BackpressureKind", ".", "FULL", ")", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "final", "ConnectableFlowable", "<", "T", ">", "replay", "(", ")", "{", "return", "FlowableReplay", ".", "createFrom", "(", "this", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Flowable.java#L12737-L12742", "partition": "test"}
{"repo": "robolectric/robolectric", "path": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java", "func_name": "ShadowAccountManager.removeAccount", "original_string": "@Implementation(minSdk = LOLLIPOP_MR1)\n  protected AccountManagerFuture<Bundle> removeAccount(\n      Account account,\n      Activity activity,\n      AccountManagerCallback<Bundle> callback,\n      Handler handler) {\n    if (account == null) {\n      throw new IllegalArgumentException(\"account is null\");\n    }\n    return start(\n        new BaseRoboAccountManagerFuture<Bundle>(callback, handler) {\n          @Override\n          public Bundle doWork()\n              throws OperationCanceledException, IOException, AuthenticatorException {\n            Bundle result = new Bundle();\n            if (removeAccountIntent == null) {\n              result.putBoolean(\n                  AccountManager.KEY_BOOLEAN_RESULT, removeAccountExplicitly(account));\n            } else {\n              result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, false);\n              result.putParcelable(AccountManager.KEY_INTENT, removeAccountIntent);\n            }\n            return result;\n          }\n        });\n  }", "language": "java", "code": "@Implementation(minSdk = LOLLIPOP_MR1)\n  protected AccountManagerFuture<Bundle> removeAccount(\n      Account account,\n      Activity activity,\n      AccountManagerCallback<Bundle> callback,\n      Handler handler) {\n    if (account == null) {\n      throw new IllegalArgumentException(\"account is null\");\n    }\n    return start(\n        new BaseRoboAccountManagerFuture<Bundle>(callback, handler) {\n          @Override\n          public Bundle doWork()\n              throws OperationCanceledException, IOException, AuthenticatorException {\n            Bundle result = new Bundle();\n            if (removeAccountIntent == null) {\n              result.putBoolean(\n                  AccountManager.KEY_BOOLEAN_RESULT, removeAccountExplicitly(account));\n            } else {\n              result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, false);\n              result.putParcelable(AccountManager.KEY_INTENT, removeAccountIntent);\n            }\n            return result;\n          }\n        });\n  }", "code_tokens": ["@", "Implementation", "(", "minSdk", "=", "LOLLIPOP_MR1", ")", "protected", "AccountManagerFuture", "<", "Bundle", ">", "removeAccount", "(", "Account", "account", ",", "Activity", "activity", ",", "AccountManagerCallback", "<", "Bundle", ">", "callback", ",", "Handler", "handler", ")", "{", "if", "(", "account", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"account is null\"", ")", ";", "}", "return", "start", "(", "new", "BaseRoboAccountManagerFuture", "<", "Bundle", ">", "(", "callback", ",", "handler", ")", "{", "@", "Override", "public", "Bundle", "doWork", "(", ")", "throws", "OperationCanceledException", ",", "IOException", ",", "AuthenticatorException", "{", "Bundle", "result", "=", "new", "Bundle", "(", ")", ";", "if", "(", "removeAccountIntent", "==", "null", ")", "{", "result", ".", "putBoolean", "(", "AccountManager", ".", "KEY_BOOLEAN_RESULT", ",", "removeAccountExplicitly", "(", "account", ")", ")", ";", "}", "else", "{", "result", ".", "putBoolean", "(", "AccountManager", ".", "KEY_BOOLEAN_RESULT", ",", "false", ")", ";", "result", ".", "putParcelable", "(", "AccountManager", ".", "KEY_INTENT", ",", "removeAccountIntent", ")", ";", "}", "return", "result", ";", "}", "}", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "4fa79a2c72f8abbf742ab920419653c207b41d62", "url": "https://github.com/robolectric/robolectric/blob/4fa79a2c72f8abbf742ab920419653c207b41d62/shadows/framework/src/main/java/org/robolectric/shadows/ShadowAccountManager.java#L184-L209", "partition": "valid"}
{"repo": "Unidata/thredds", "path": "bufr/src/main/java/ucar/nc2/iosp/bufr/DataDescriptor.java", "func_name": "DataDescriptor.getListHash", "original_string": "private int getListHash() {\r\n    if (subKeys == null) return 0;\r\n    int result = 1;\r\n    for (DataDescriptor e : subKeys)\r\n      result = 31*result + (e==null ? 0 : e.hashCode2());\r\n    return result;\r\n  }", "language": "java", "code": "private int getListHash() {\r\n    if (subKeys == null) return 0;\r\n    int result = 1;\r\n    for (DataDescriptor e : subKeys)\r\n      result = 31*result + (e==null ? 0 : e.hashCode2());\r\n    return result;\r\n  }", "code_tokens": ["private", "int", "getListHash", "(", ")", "{", "if", "(", "subKeys", "==", "null", ")", "return", "0", ";", "int", "result", "=", "1", ";", "for", "(", "DataDescriptor", "e", ":", "subKeys", ")", "result", "=", "31", "*", "result", "+", "(", "e", "==", "null", "?", "0", ":", "e", ".", "hashCode2", "(", ")", ")", ";", "return", "result", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/bufr/src/main/java/ucar/nc2/iosp/bufr/DataDescriptor.java#L362-L368", "partition": "test"}
{"repo": "wro4j/wro4j", "path": "wro4j-core/src/main/java/ro/isdc/wro/model/resource/processor/decorator/AbstractProcessorDecoratorSupport.java", "func_name": "AbstractProcessorDecoratorSupport.getSupportedResourceTypeForProcessor", "original_string": "final SupportedResourceType getSupportedResourceTypeForProcessor(final Object processor) {\n    SupportedResourceType supportedType = processor.getClass().getAnnotation(SupportedResourceType.class);\n    /**\n     * This is a special case for processors which implement {@link SupportedResourceTypeProvider} interface. This is\n     * useful for decorator processors which needs to \"inherit\" the {@link SupportedResourceType} of the decorated\n     * processor.\n     */\n    if (processor instanceof SupportedResourceTypeAware) {\n      supportedType = ((SupportedResourceTypeAware) processor).getSupportedResourceType();\n    }\n    return supportedType;\n  }", "language": "java", "code": "final SupportedResourceType getSupportedResourceTypeForProcessor(final Object processor) {\n    SupportedResourceType supportedType = processor.getClass().getAnnotation(SupportedResourceType.class);\n    /**\n     * This is a special case for processors which implement {@link SupportedResourceTypeProvider} interface. This is\n     * useful for decorator processors which needs to \"inherit\" the {@link SupportedResourceType} of the decorated\n     * processor.\n     */\n    if (processor instanceof SupportedResourceTypeAware) {\n      supportedType = ((SupportedResourceTypeAware) processor).getSupportedResourceType();\n    }\n    return supportedType;\n  }", "code_tokens": ["final", "SupportedResourceType", "getSupportedResourceTypeForProcessor", "(", "final", "Object", "processor", ")", "{", "SupportedResourceType", "supportedType", "=", "processor", ".", "getClass", "(", ")", ".", "getAnnotation", "(", "SupportedResourceType", ".", "class", ")", ";", "/**\n     * This is a special case for processors which implement {@link SupportedResourceTypeProvider} interface. This is\n     * useful for decorator processors which needs to \"inherit\" the {@link SupportedResourceType} of the decorated\n     * processor.\n     */", "if", "(", "processor", "instanceof", "SupportedResourceTypeAware", ")", "{", "supportedType", "=", "(", "(", "SupportedResourceTypeAware", ")", "processor", ")", ".", "getSupportedResourceType", "(", ")", ";", "}", "return", "supportedType", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2a3de71ab8bf0af7061fb6327501e08198338df", "url": "https://github.com/wro4j/wro4j/blob/d2a3de71ab8bf0af7061fb6327501e08198338df/wro4j-core/src/main/java/ro/isdc/wro/model/resource/processor/decorator/AbstractProcessorDecoratorSupport.java#L63-L74", "partition": "test"}
{"repo": "socialize/socialize-sdk-android", "path": "sdk/src/com/socialize/CommentUtils.java", "func_name": "CommentUtils.getCommentsByApplication", "original_string": "public static void getCommentsByApplication (Activity context, int start, int end, CommentListListener listener) {\n\t\tproxy.getCommentsByApplication(context, start, end, listener);\n\t}", "language": "java", "code": "public static void getCommentsByApplication (Activity context, int start, int end, CommentListListener listener) {\n\t\tproxy.getCommentsByApplication(context, start, end, listener);\n\t}", "code_tokens": ["public", "static", "void", "getCommentsByApplication", "(", "Activity", "context", ",", "int", "start", ",", "int", "end", ",", "CommentListListener", "listener", ")", "{", "proxy", ".", "getCommentsByApplication", "(", "context", ",", "start", ",", "end", ",", "listener", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "23044d66c83718fe5c3f6f4b7b4033ac5b06fbee", "url": "https://github.com/socialize/socialize-sdk-android/blob/23044d66c83718fe5c3f6f4b7b4033ac5b06fbee/sdk/src/com/socialize/CommentUtils.java#L148-L150", "partition": "valid"}
{"repo": "mjeanroy/junit-servers", "path": "junit-servers-core/src/main/java/com/github/mjeanroy/junit/servers/client/impl/okhttp3/OkHttpRequest.java", "func_name": "OkHttpRequest.handleHeaders", "original_string": "private void handleHeaders(Request.Builder builder) {\n\t\tfor (HttpHeader h : headers.values()) {\n\t\t\tbuilder.addHeader(h.getName(), h.serializeValues());\n\t\t}\n\t}", "language": "java", "code": "private void handleHeaders(Request.Builder builder) {\n\t\tfor (HttpHeader h : headers.values()) {\n\t\t\tbuilder.addHeader(h.getName(), h.serializeValues());\n\t\t}\n\t}", "code_tokens": ["private", "void", "handleHeaders", "(", "Request", ".", "Builder", "builder", ")", "{", "for", "(", "HttpHeader", "h", ":", "headers", ".", "values", "(", ")", ")", "{", "builder", ".", "addHeader", "(", "h", ".", "getName", "(", ")", ",", "h", ".", "serializeValues", "(", ")", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "e5628ac13414da9ab0110491c011e2b02239155c", "url": "https://github.com/mjeanroy/junit-servers/blob/e5628ac13414da9ab0110491c011e2b02239155c/junit-servers-core/src/main/java/com/github/mjeanroy/junit/servers/client/impl/okhttp3/OkHttpRequest.java#L104-L108", "partition": "valid"}
{"repo": "Unidata/thredds", "path": "tds/src/main/java/thredds/core/CatalogManager.java", "func_name": "CatalogManager.makeDynamicCatalog", "original_string": "private Object makeDynamicCatalog(String path, URI baseURI) throws IOException {\n    boolean isLatest = path.endsWith(\"/latest.xml\");\n\n    // strip off the filename\n    int pos = path.lastIndexOf(\"/\");\n    String workPath = (pos >= 0) ? path.substring(0, pos) : path;\n    String filename = (pos > 0) ? path.substring(pos + 1) : path;\n\n    // now look through the data roots for a maximal match\n    DataRootManager.DataRootMatch match = dataRootManager.findDataRootMatch(workPath);\n    if (match == null)\n      return null;\n\n    // Feature Collection\n    if (match.dataRoot.getFeatureCollection() != null) {\n      InvDatasetFeatureCollection fc = featureCollectionCache.get(match.dataRoot.getFeatureCollection());\n\n      if (isLatest)\n        return fc.makeLatest(match.remaining, path, baseURI);\n      else\n        return fc.makeCatalog(match.remaining, path, baseURI);\n    }\n\n    // DatasetScan\n    DatasetScan dscan = match.dataRoot.getDatasetScan();\n    if (dscan != null) {\n      if (log.isDebugEnabled()) log.debug(\"makeDynamicCatalog(): Calling DatasetScan.makeCatalogForDirectory( \" + baseURI + \", \" + path + \").\");\n      CatalogBuilder cat;\n\n      if (isLatest)\n        cat = dscan.makeCatalogForLatest(workPath, baseURI);\n      else\n        cat = dscan.makeCatalogForDirectory(workPath, baseURI);\n\n      if (null == cat)\n        log.error(\"makeDynamicCatalog(): DatasetScan.makeCatalogForDirectory failed = \" + workPath);\n\n      return cat;\n    }\n\n    // CatalogScan\n    CatalogScan catScan = match.dataRoot.getCatalogScan();\n    if (catScan != null) {\n      if (!filename.equalsIgnoreCase(CatalogScan.CATSCAN)) { // its an actual catalog\n        return catScan.getCatalog(tdsContext.getThreddsDirectory(), match.remaining, filename, ccc);\n      }\n\n      if (log.isDebugEnabled()) log.debug(\"makeDynamicCatalog(): Calling CatalogScan.makeCatalogForDirectory( \" + baseURI + \", \" + path + \").\");\n      CatalogBuilder cat = catScan.makeCatalogFromDirectory(tdsContext.getThreddsDirectory(), match.remaining, baseURI);\n\n      if (null == cat)\n        log.error(\"makeDynamicCatalog(): CatalogScan.makeCatalogForDirectory failed = \" + workPath);\n\n      return cat;\n    }\n\n    log.warn(\"makeDynamicCatalog() failed for =\" + workPath + \" request path= \" + path);\n    return null;\n  }", "language": "java", "code": "private Object makeDynamicCatalog(String path, URI baseURI) throws IOException {\n    boolean isLatest = path.endsWith(\"/latest.xml\");\n\n    // strip off the filename\n    int pos = path.lastIndexOf(\"/\");\n    String workPath = (pos >= 0) ? path.substring(0, pos) : path;\n    String filename = (pos > 0) ? path.substring(pos + 1) : path;\n\n    // now look through the data roots for a maximal match\n    DataRootManager.DataRootMatch match = dataRootManager.findDataRootMatch(workPath);\n    if (match == null)\n      return null;\n\n    // Feature Collection\n    if (match.dataRoot.getFeatureCollection() != null) {\n      InvDatasetFeatureCollection fc = featureCollectionCache.get(match.dataRoot.getFeatureCollection());\n\n      if (isLatest)\n        return fc.makeLatest(match.remaining, path, baseURI);\n      else\n        return fc.makeCatalog(match.remaining, path, baseURI);\n    }\n\n    // DatasetScan\n    DatasetScan dscan = match.dataRoot.getDatasetScan();\n    if (dscan != null) {\n      if (log.isDebugEnabled()) log.debug(\"makeDynamicCatalog(): Calling DatasetScan.makeCatalogForDirectory( \" + baseURI + \", \" + path + \").\");\n      CatalogBuilder cat;\n\n      if (isLatest)\n        cat = dscan.makeCatalogForLatest(workPath, baseURI);\n      else\n        cat = dscan.makeCatalogForDirectory(workPath, baseURI);\n\n      if (null == cat)\n        log.error(\"makeDynamicCatalog(): DatasetScan.makeCatalogForDirectory failed = \" + workPath);\n\n      return cat;\n    }\n\n    // CatalogScan\n    CatalogScan catScan = match.dataRoot.getCatalogScan();\n    if (catScan != null) {\n      if (!filename.equalsIgnoreCase(CatalogScan.CATSCAN)) { // its an actual catalog\n        return catScan.getCatalog(tdsContext.getThreddsDirectory(), match.remaining, filename, ccc);\n      }\n\n      if (log.isDebugEnabled()) log.debug(\"makeDynamicCatalog(): Calling CatalogScan.makeCatalogForDirectory( \" + baseURI + \", \" + path + \").\");\n      CatalogBuilder cat = catScan.makeCatalogFromDirectory(tdsContext.getThreddsDirectory(), match.remaining, baseURI);\n\n      if (null == cat)\n        log.error(\"makeDynamicCatalog(): CatalogScan.makeCatalogForDirectory failed = \" + workPath);\n\n      return cat;\n    }\n\n    log.warn(\"makeDynamicCatalog() failed for =\" + workPath + \" request path= \" + path);\n    return null;\n  }", "code_tokens": ["private", "Object", "makeDynamicCatalog", "(", "String", "path", ",", "URI", "baseURI", ")", "throws", "IOException", "{", "boolean", "isLatest", "=", "path", ".", "endsWith", "(", "\"/latest.xml\"", ")", ";", "// strip off the filename", "int", "pos", "=", "path", ".", "lastIndexOf", "(", "\"/\"", ")", ";", "String", "workPath", "=", "(", "pos", ">=", "0", ")", "?", "path", ".", "substring", "(", "0", ",", "pos", ")", ":", "path", ";", "String", "filename", "=", "(", "pos", ">", "0", ")", "?", "path", ".", "substring", "(", "pos", "+", "1", ")", ":", "path", ";", "// now look through the data roots for a maximal match", "DataRootManager", ".", "DataRootMatch", "match", "=", "dataRootManager", ".", "findDataRootMatch", "(", "workPath", ")", ";", "if", "(", "match", "==", "null", ")", "return", "null", ";", "// Feature Collection", "if", "(", "match", ".", "dataRoot", ".", "getFeatureCollection", "(", ")", "!=", "null", ")", "{", "InvDatasetFeatureCollection", "fc", "=", "featureCollectionCache", ".", "get", "(", "match", ".", "dataRoot", ".", "getFeatureCollection", "(", ")", ")", ";", "if", "(", "isLatest", ")", "return", "fc", ".", "makeLatest", "(", "match", ".", "remaining", ",", "path", ",", "baseURI", ")", ";", "else", "return", "fc", ".", "makeCatalog", "(", "match", ".", "remaining", ",", "path", ",", "baseURI", ")", ";", "}", "// DatasetScan", "DatasetScan", "dscan", "=", "match", ".", "dataRoot", ".", "getDatasetScan", "(", ")", ";", "if", "(", "dscan", "!=", "null", ")", "{", "if", "(", "log", ".", "isDebugEnabled", "(", ")", ")", "log", ".", "debug", "(", "\"makeDynamicCatalog(): Calling DatasetScan.makeCatalogForDirectory( \"", "+", "baseURI", "+", "\", \"", "+", "path", "+", "\").\"", ")", ";", "CatalogBuilder", "cat", ";", "if", "(", "isLatest", ")", "cat", "=", "dscan", ".", "makeCatalogForLatest", "(", "workPath", ",", "baseURI", ")", ";", "else", "cat", "=", "dscan", ".", "makeCatalogForDirectory", "(", "workPath", ",", "baseURI", ")", ";", "if", "(", "null", "==", "cat", ")", "log", ".", "error", "(", "\"makeDynamicCatalog(): DatasetScan.makeCatalogForDirectory failed = \"", "+", "workPath", ")", ";", "return", "cat", ";", "}", "// CatalogScan", "CatalogScan", "catScan", "=", "match", ".", "dataRoot", ".", "getCatalogScan", "(", ")", ";", "if", "(", "catScan", "!=", "null", ")", "{", "if", "(", "!", "filename", ".", "equalsIgnoreCase", "(", "CatalogScan", ".", "CATSCAN", ")", ")", "{", "// its an actual catalog", "return", "catScan", ".", "getCatalog", "(", "tdsContext", ".", "getThreddsDirectory", "(", ")", ",", "match", ".", "remaining", ",", "filename", ",", "ccc", ")", ";", "}", "if", "(", "log", ".", "isDebugEnabled", "(", ")", ")", "log", ".", "debug", "(", "\"makeDynamicCatalog(): Calling CatalogScan.makeCatalogForDirectory( \"", "+", "baseURI", "+", "\", \"", "+", "path", "+", "\").\"", ")", ";", "CatalogBuilder", "cat", "=", "catScan", ".", "makeCatalogFromDirectory", "(", "tdsContext", ".", "getThreddsDirectory", "(", ")", ",", "match", ".", "remaining", ",", "baseURI", ")", ";", "if", "(", "null", "==", "cat", ")", "log", ".", "error", "(", "\"makeDynamicCatalog(): CatalogScan.makeCatalogForDirectory failed = \"", "+", "workPath", ")", ";", "return", "cat", ";", "}", "log", ".", "warn", "(", "\"makeDynamicCatalog() failed for =\"", "+", "workPath", "+", "\" request path= \"", "+", "path", ")", ";", "return", "null", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/tds/src/main/java/thredds/core/CatalogManager.java#L98-L156", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-core/src/main/java/jodd/io/StreamUtil.java", "func_name": "StreamUtil.readAvailableBytes", "original_string": "public static byte[] readAvailableBytes(final InputStream input) throws IOException {\n\t\tint numToRead = input.available();\n\t\tbyte[] buffer = new byte[numToRead];\n\n\t\tint totalRead = ZERO;\n\t\tint read;\n\n\t\twhile ((totalRead < numToRead) && (read = input.read(buffer, totalRead, numToRead - totalRead)) >= ZERO) {\n\t\t\ttotalRead = totalRead + read;\n\t\t}\n\n\t\tif (totalRead < numToRead) {\n\t\t\tthrow new IOException(\"Failed to completely read InputStream\");\n\t\t}\n\n\t\treturn buffer;\n\t}", "language": "java", "code": "public static byte[] readAvailableBytes(final InputStream input) throws IOException {\n\t\tint numToRead = input.available();\n\t\tbyte[] buffer = new byte[numToRead];\n\n\t\tint totalRead = ZERO;\n\t\tint read;\n\n\t\twhile ((totalRead < numToRead) && (read = input.read(buffer, totalRead, numToRead - totalRead)) >= ZERO) {\n\t\t\ttotalRead = totalRead + read;\n\t\t}\n\n\t\tif (totalRead < numToRead) {\n\t\t\tthrow new IOException(\"Failed to completely read InputStream\");\n\t\t}\n\n\t\treturn buffer;\n\t}", "code_tokens": ["public", "static", "byte", "[", "]", "readAvailableBytes", "(", "final", "InputStream", "input", ")", "throws", "IOException", "{", "int", "numToRead", "=", "input", ".", "available", "(", ")", ";", "byte", "[", "]", "buffer", "=", "new", "byte", "[", "numToRead", "]", ";", "int", "totalRead", "=", "ZERO", ";", "int", "read", ";", "while", "(", "(", "totalRead", "<", "numToRead", ")", "&&", "(", "read", "=", "input", ".", "read", "(", "buffer", ",", "totalRead", ",", "numToRead", "-", "totalRead", ")", ")", ">=", "ZERO", ")", "{", "totalRead", "=", "totalRead", "+", "read", ";", "}", "if", "(", "totalRead", "<", "numToRead", ")", "{", "throw", "new", "IOException", "(", "\"Failed to completely read InputStream\"", ")", ";", "}", "return", "buffer", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-core/src/main/java/jodd/io/StreamUtil.java#L212-L228", "partition": "test"}
{"repo": "ocpsoft/rewrite", "path": "config-prettyfaces/src/main/java/com/ocpsoft/pretty/faces2/component/LocationBehavior.java", "func_name": "LocationBehavior.buildScriptInternal", "original_string": "private String buildScriptInternal(final String url)\n   {\n      StringBuilder builder = new StringBuilder();\n      builder.append(\"window.location.href = '\");\n      builder.append(url);\n      builder.append(\"'; return false;\");\n      return builder.toString();\n   }", "language": "java", "code": "private String buildScriptInternal(final String url)\n   {\n      StringBuilder builder = new StringBuilder();\n      builder.append(\"window.location.href = '\");\n      builder.append(url);\n      builder.append(\"'; return false;\");\n      return builder.toString();\n   }", "code_tokens": ["private", "String", "buildScriptInternal", "(", "final", "String", "url", ")", "{", "StringBuilder", "builder", "=", "new", "StringBuilder", "(", ")", ";", "builder", ".", "append", "(", "\"window.location.href = '\"", ")", ";", "builder", ".", "append", "(", "url", ")", ";", "builder", ".", "append", "(", "\"'; return false;\"", ")", ";", "return", "builder", ".", "toString", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "eded0bad0101d119a3a1e67ed3f97a3bc9a8222e", "url": "https://github.com/ocpsoft/rewrite/blob/eded0bad0101d119a3a1e67ed3f97a3bc9a8222e/config-prettyfaces/src/main/java/com/ocpsoft/pretty/faces2/component/LocationBehavior.java#L101-L108", "partition": "valid"}
{"repo": "Unidata/thredds", "path": "opendap/dtswar/src/main/java/opendap/dts/DTSServlet.java", "func_name": "DTSServlet.badURL", "original_string": "public void badURL(HttpServletRequest request, HttpServletResponse response)\n            throws Exception\n    {\n        if(Debug.isSet(\"showResponse\")) {\n            log.debug(\"Sending Bad URL Page.\");\n        }\n\n        //log.info(\"DODSServlet.badURL \" + rs.getRequest().getRequestURI());\n\n        response.setContentType(\"text/html\");\n        response.setHeader(\"XDODS-Server\", getServerVersion());\n        response.setHeader(\"Content-Description\", \"dods-error\");\n        // Commented because of a bug in the OPeNDAP C++ stuff...\n        //rs.getResponse().setHeader(\"Content-Encoding\", \"plain\");\n\n        PrintWriter pw = new PrintWriter(new OutputStreamWriter(response.getOutputStream(), Util.UTF8));\n\n        printBadURLPage(pw);\n        printHelpPage(pw);\n        pw.flush();\n\n        response.setStatus(HttpServletResponse.SC_OK);\n\n    }", "language": "java", "code": "public void badURL(HttpServletRequest request, HttpServletResponse response)\n            throws Exception\n    {\n        if(Debug.isSet(\"showResponse\")) {\n            log.debug(\"Sending Bad URL Page.\");\n        }\n\n        //log.info(\"DODSServlet.badURL \" + rs.getRequest().getRequestURI());\n\n        response.setContentType(\"text/html\");\n        response.setHeader(\"XDODS-Server\", getServerVersion());\n        response.setHeader(\"Content-Description\", \"dods-error\");\n        // Commented because of a bug in the OPeNDAP C++ stuff...\n        //rs.getResponse().setHeader(\"Content-Encoding\", \"plain\");\n\n        PrintWriter pw = new PrintWriter(new OutputStreamWriter(response.getOutputStream(), Util.UTF8));\n\n        printBadURLPage(pw);\n        printHelpPage(pw);\n        pw.flush();\n\n        response.setStatus(HttpServletResponse.SC_OK);\n\n    }", "code_tokens": ["public", "void", "badURL", "(", "HttpServletRequest", "request", ",", "HttpServletResponse", "response", ")", "throws", "Exception", "{", "if", "(", "Debug", ".", "isSet", "(", "\"showResponse\"", ")", ")", "{", "log", ".", "debug", "(", "\"Sending Bad URL Page.\"", ")", ";", "}", "//log.info(\"DODSServlet.badURL \" + rs.getRequest().getRequestURI());", "response", ".", "setContentType", "(", "\"text/html\"", ")", ";", "response", ".", "setHeader", "(", "\"XDODS-Server\"", ",", "getServerVersion", "(", ")", ")", ";", "response", ".", "setHeader", "(", "\"Content-Description\"", ",", "\"dods-error\"", ")", ";", "// Commented because of a bug in the OPeNDAP C++ stuff...", "//rs.getResponse().setHeader(\"Content-Encoding\", \"plain\");", "PrintWriter", "pw", "=", "new", "PrintWriter", "(", "new", "OutputStreamWriter", "(", "response", ".", "getOutputStream", "(", ")", ",", "Util", ".", "UTF8", ")", ")", ";", "printBadURLPage", "(", "pw", ")", ";", "printHelpPage", "(", "pw", ")", ";", "pw", ".", "flush", "(", ")", ";", "response", ".", "setStatus", "(", "HttpServletResponse", ".", "SC_OK", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/opendap/dtswar/src/main/java/opendap/dts/DTSServlet.java#L1094-L1117", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java", "func_name": "CsrfShield.assureSize", "original_string": "protected static void assureSize(final Set<Token> tokenSet) {\n\t\tif (tokenSet.size() < maxTokensPerSession) {\n\t\t\treturn;\n\t\t}\n\t\tlong validUntilMin = Long.MAX_VALUE;\n\t\tToken tokenToRemove = null;\n\t\tIterator<Token> iterator = tokenSet.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tToken token = iterator.next();\n\t\t\tif (token.isExpired()) {\n\t\t\t\titerator.remove();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (token.validUntil < validUntilMin) {\n\t\t\t\tvalidUntilMin = token.validUntil;\n\t\t\t\ttokenToRemove = token;\n\t\t\t}\n\t\t}\n\t\tif ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) {\n\t\t\ttokenSet.remove(tokenToRemove);\n\t\t}\n\t}", "language": "java", "code": "protected static void assureSize(final Set<Token> tokenSet) {\n\t\tif (tokenSet.size() < maxTokensPerSession) {\n\t\t\treturn;\n\t\t}\n\t\tlong validUntilMin = Long.MAX_VALUE;\n\t\tToken tokenToRemove = null;\n\t\tIterator<Token> iterator = tokenSet.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tToken token = iterator.next();\n\t\t\tif (token.isExpired()) {\n\t\t\t\titerator.remove();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (token.validUntil < validUntilMin) {\n\t\t\t\tvalidUntilMin = token.validUntil;\n\t\t\t\ttokenToRemove = token;\n\t\t\t}\n\t\t}\n\t\tif ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) {\n\t\t\ttokenSet.remove(tokenToRemove);\n\t\t}\n\t}", "code_tokens": ["protected", "static", "void", "assureSize", "(", "final", "Set", "<", "Token", ">", "tokenSet", ")", "{", "if", "(", "tokenSet", ".", "size", "(", ")", "<", "maxTokensPerSession", ")", "{", "return", ";", "}", "long", "validUntilMin", "=", "Long", ".", "MAX_VALUE", ";", "Token", "tokenToRemove", "=", "null", ";", "Iterator", "<", "Token", ">", "iterator", "=", "tokenSet", ".", "iterator", "(", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "Token", "token", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "token", ".", "isExpired", "(", ")", ")", "{", "iterator", ".", "remove", "(", ")", ";", "continue", ";", "}", "if", "(", "token", ".", "validUntil", "<", "validUntilMin", ")", "{", "validUntilMin", "=", "token", ".", "validUntil", ";", "tokenToRemove", "=", "token", ";", "}", "}", "if", "(", "(", "tokenToRemove", "!=", "null", ")", "&&", "(", "tokenSet", ".", "size", "(", ")", ">=", "maxTokensPerSession", ")", ")", "{", "tokenSet", ".", "remove", "(", "tokenToRemove", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java#L107-L128", "partition": "test"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.roundToInt", "original_string": "@GwtIncompatible // #roundIntermediate\n  public static int roundToInt(double x, RoundingMode mode) {\n    double z = roundIntermediate(x, mode);\n    checkInRangeForRoundingInputs(\n        z > MIN_INT_AS_DOUBLE - 1.0 & z < MAX_INT_AS_DOUBLE + 1.0, x, mode);\n    return (int) z;\n  }", "language": "java", "code": "@GwtIncompatible // #roundIntermediate\n  public static int roundToInt(double x, RoundingMode mode) {\n    double z = roundIntermediate(x, mode);\n    checkInRangeForRoundingInputs(\n        z > MIN_INT_AS_DOUBLE - 1.0 & z < MAX_INT_AS_DOUBLE + 1.0, x, mode);\n    return (int) z;\n  }", "code_tokens": ["@", "GwtIncompatible", "// #roundIntermediate", "public", "static", "int", "roundToInt", "(", "double", "x", ",", "RoundingMode", "mode", ")", "{", "double", "z", "=", "roundIntermediate", "(", "x", ",", "mode", ")", ";", "checkInRangeForRoundingInputs", "(", "z", ">", "MIN_INT_AS_DOUBLE", "-", "1.0", "&", "z", "<", "MAX_INT_AS_DOUBLE", "+", "1.0", ",", "x", ",", "mode", ")", ";", "return", "(", "int", ")", "z", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L130-L136", "partition": "valid"}
{"repo": "pnerg/java-scala-util", "path": "src/main/java/javascalautils/concurrent/FutureCompanion.java", "func_name": "FutureCompanion.Future", "original_string": "public static Future<Unit> Future(VoidFunction0 function) {\n    \treturn Future(() -> {\n    \t\tfunction.apply();\n    \t\treturn Unit.Instance;\n    \t});\n    }", "language": "java", "code": "public static Future<Unit> Future(VoidFunction0 function) {\n    \treturn Future(() -> {\n    \t\tfunction.apply();\n    \t\treturn Unit.Instance;\n    \t});\n    }", "code_tokens": ["public", "static", "Future", "<", "Unit", ">", "Future", "(", "VoidFunction0", "function", ")", "{", "return", "Future", "(", "(", ")", "->", "{", "function", ".", "apply", "(", ")", ";", "return", "Unit", ".", "Instance", ";", "}", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "7823aa9ab3fb5091c233b3605c53050de37db61d", "url": "https://github.com/pnerg/java-scala-util/blob/7823aa9ab3fb5091c233b3605c53050de37db61d/src/main/java/javascalautils/concurrent/FutureCompanion.java#L75-L80", "partition": "valid"}
{"repo": "playframework/playframework", "path": "core/play/src/main/java/play/core/cookie/encoding/ServerCookieEncoder.java", "func_name": "ServerCookieEncoder.encode", "original_string": "public List<String> encode(Collection<? extends Cookie> cookies) {\n    if (cookies == null) {\n      throw new NullPointerException(\"cookies\");\n    }\n    if (cookies.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<String> encoded = new ArrayList<String>(cookies.size());\n    for (Cookie c : cookies) {\n      if (c == null) {\n        break;\n      }\n      encoded.add(encode(c));\n    }\n    return encoded;\n  }", "language": "java", "code": "public List<String> encode(Collection<? extends Cookie> cookies) {\n    if (cookies == null) {\n      throw new NullPointerException(\"cookies\");\n    }\n    if (cookies.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<String> encoded = new ArrayList<String>(cookies.size());\n    for (Cookie c : cookies) {\n      if (c == null) {\n        break;\n      }\n      encoded.add(encode(c));\n    }\n    return encoded;\n  }", "code_tokens": ["public", "List", "<", "String", ">", "encode", "(", "Collection", "<", "?", "extends", "Cookie", ">", "cookies", ")", "{", "if", "(", "cookies", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"cookies\"", ")", ";", "}", "if", "(", "cookies", ".", "isEmpty", "(", ")", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "List", "<", "String", ">", "encoded", "=", "new", "ArrayList", "<", "String", ">", "(", "cookies", ".", "size", "(", ")", ")", ";", "for", "(", "Cookie", "c", ":", "cookies", ")", "{", "if", "(", "c", "==", "null", ")", "{", "break", ";", "}", "encoded", ".", "add", "(", "encode", "(", "c", ")", ")", ";", "}", "return", "encoded", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "3c46dca803d24e715d85de678c59dcfac9525a00", "url": "https://github.com/playframework/playframework/blob/3c46dca803d24e715d85de678c59dcfac9525a00/core/play/src/main/java/play/core/cookie/encoding/ServerCookieEncoder.java#L141-L157", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java", "func_name": "ServiceManagementImpl.activate", "original_string": "public void activate(ServiceID serviceID) throws NullPointerException,\n\t\t\tUnrecognizedServiceException, InvalidStateException,\n\t\t\tInvalidLinkNameBindingStateException {\n\t\tactivate(serviceID,null);\t\t\n\t}", "language": "java", "code": "public void activate(ServiceID serviceID) throws NullPointerException,\n\t\t\tUnrecognizedServiceException, InvalidStateException,\n\t\t\tInvalidLinkNameBindingStateException {\n\t\tactivate(serviceID,null);\t\t\n\t}", "code_tokens": ["public", "void", "activate", "(", "ServiceID", "serviceID", ")", "throws", "NullPointerException", ",", "UnrecognizedServiceException", ",", "InvalidStateException", ",", "InvalidLinkNameBindingStateException", "{", "activate", "(", "serviceID", ",", "null", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java#L214-L218", "partition": "test"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/ImmutableMultiset.java", "func_name": "ImmutableMultiset.copyOf", "original_string": "public static <E> ImmutableMultiset<E> copyOf(Iterator<? extends E> elements) {\n    Multiset<E> multiset = LinkedHashMultiset.create();\n    Iterators.addAll(multiset, elements);\n    return copyFromEntries(multiset.entrySet());\n  }", "language": "java", "code": "public static <E> ImmutableMultiset<E> copyOf(Iterator<? extends E> elements) {\n    Multiset<E> multiset = LinkedHashMultiset.create();\n    Iterators.addAll(multiset, elements);\n    return copyFromEntries(multiset.entrySet());\n  }", "code_tokens": ["public", "static", "<", "E", ">", "ImmutableMultiset", "<", "E", ">", "copyOf", "(", "Iterator", "<", "?", "extends", "E", ">", "elements", ")", "{", "Multiset", "<", "E", ">", "multiset", "=", "LinkedHashMultiset", ".", "create", "(", ")", ";", "Iterators", ".", "addAll", "(", "multiset", ",", "elements", ")", ";", "return", "copyFromEntries", "(", "multiset", ".", "entrySet", "(", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/ImmutableMultiset.java#L212-L216", "partition": "valid"}
{"repo": "nyla-solutions/gedi-geode", "path": "gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/operations/ObjectSizing.java", "func_name": "ObjectSizing.sizeRegion", "original_string": "public void sizeRegion(Region<?,?> region, int numEntries) {\n\t    if (region == null) {\n\t      throw new IllegalArgumentException(\"Region is null.\");\n\t    }\n\n\t    if (region instanceof PartitionedRegion) {\n\t      sizePartitionedRegion(region, numEntries);\n\t    } else {\n\t      sizeReplicatedOrLocalRegion(region, numEntries);\n\t    }\n\t  }", "language": "java", "code": "public void sizeRegion(Region<?,?> region, int numEntries) {\n\t    if (region == null) {\n\t      throw new IllegalArgumentException(\"Region is null.\");\n\t    }\n\n\t    if (region instanceof PartitionedRegion) {\n\t      sizePartitionedRegion(region, numEntries);\n\t    } else {\n\t      sizeReplicatedOrLocalRegion(region, numEntries);\n\t    }\n\t  }", "code_tokens": ["public", "void", "sizeRegion", "(", "Region", "<", "?", ",", "?", ">", "region", ",", "int", "numEntries", ")", "{", "if", "(", "region", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Region is null.\"", ")", ";", "}", "if", "(", "region", "instanceof", "PartitionedRegion", ")", "{", "sizePartitionedRegion", "(", "region", ",", "numEntries", ")", ";", "}", "else", "{", "sizeReplicatedOrLocalRegion", "(", "region", ",", "numEntries", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "3dd71d6e66e941ce350b306b70677ee95a7d9eee", "url": "https://github.com/nyla-solutions/gedi-geode/blob/3dd71d6e66e941ce350b306b70677ee95a7d9eee/gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/operations/ObjectSizing.java#L78-L88", "partition": "test"}
{"repo": "rupertlssmith/lojix", "path": "base/common/src/main/com/thesett/common/util/SizeableLinkedList.java", "func_name": "SizeableLinkedList.add", "original_string": "public boolean add(T o)\n    {\n        boolean result = super.add(o);\n\n        sizeOf += (result) ? o.sizeof() : 0;\n\n        return result;\n    }", "language": "java", "code": "public boolean add(T o)\n    {\n        boolean result = super.add(o);\n\n        sizeOf += (result) ? o.sizeof() : 0;\n\n        return result;\n    }", "code_tokens": ["public", "boolean", "add", "(", "T", "o", ")", "{", "boolean", "result", "=", "super", ".", "add", "(", "o", ")", ";", "sizeOf", "+=", "(", "result", ")", "?", "o", ".", "sizeof", "(", ")", ":", "0", ";", "return", "result", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ad494dc8bce2345567de7689d42291d4b30fbd51", "url": "https://github.com/rupertlssmith/lojix/blob/ad494dc8bce2345567de7689d42291d4b30fbd51/base/common/src/main/com/thesett/common/util/SizeableLinkedList.java#L66-L73", "partition": "test"}
{"repo": "nutzam/nutz", "path": "src/org/nutz/service/IdNameEntityService.java", "func_name": "IdNameEntityService.exists", "original_string": "public boolean exists(String name) {\n        EntityField ef = getEntity().getNameField();\n        if (null == ef)\n            return false;\n        return dao().count(getEntityClass(), Cnd.where(ef.getName(), \"=\", name)) > 0;\n    }", "language": "java", "code": "public boolean exists(String name) {\n        EntityField ef = getEntity().getNameField();\n        if (null == ef)\n            return false;\n        return dao().count(getEntityClass(), Cnd.where(ef.getName(), \"=\", name)) > 0;\n    }", "code_tokens": ["public", "boolean", "exists", "(", "String", "name", ")", "{", "EntityField", "ef", "=", "getEntity", "(", ")", ".", "getNameField", "(", ")", ";", "if", "(", "null", "==", "ef", ")", "return", "false", ";", "return", "dao", "(", ")", ".", "count", "(", "getEntityClass", "(", ")", ",", "Cnd", ".", "where", "(", "ef", ".", "getName", "(", ")", ",", "\"=\"", ",", "name", ")", ")", ">", "0", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "a38694d5cbda2692e7931ab093c168487a6a4bfe", "url": "https://github.com/nutzam/nutz/blob/a38694d5cbda2692e7931ab093c168487a6a4bfe/src/org/nutz/service/IdNameEntityService.java#L76-L81", "partition": "valid"}
{"repo": "robeio/robe", "path": "robe-guice/src/main/java/io/robe/guice/GuiceBundle.java", "func_name": "GuiceBundle.createReflections", "original_string": "private void createReflections(String[] scanPackages) {\n        if (scanPackages.length < 1) {\n            LOGGER.warn(\"No package defined in configuration (scanPackages)!\");\n            return;\n        }\n        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();\n        FilterBuilder filterBuilder = new FilterBuilder();\n        for (String packageName : scanPackages) {\n            configurationBuilder.addUrls(ClasspathHelper.forPackage(packageName));\n            filterBuilder.include(FilterBuilder.prefix(packageName));\n        }\n\n        configurationBuilder.filterInputsBy(filterBuilder).setScanners(new SubTypesScanner(), new TypeAnnotationsScanner());\n        this.reflections = new Reflections(configurationBuilder);\n\n    }", "language": "java", "code": "private void createReflections(String[] scanPackages) {\n        if (scanPackages.length < 1) {\n            LOGGER.warn(\"No package defined in configuration (scanPackages)!\");\n            return;\n        }\n        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();\n        FilterBuilder filterBuilder = new FilterBuilder();\n        for (String packageName : scanPackages) {\n            configurationBuilder.addUrls(ClasspathHelper.forPackage(packageName));\n            filterBuilder.include(FilterBuilder.prefix(packageName));\n        }\n\n        configurationBuilder.filterInputsBy(filterBuilder).setScanners(new SubTypesScanner(), new TypeAnnotationsScanner());\n        this.reflections = new Reflections(configurationBuilder);\n\n    }", "code_tokens": ["private", "void", "createReflections", "(", "String", "[", "]", "scanPackages", ")", "{", "if", "(", "scanPackages", ".", "length", "<", "1", ")", "{", "LOGGER", ".", "warn", "(", "\"No package defined in configuration (scanPackages)!\"", ")", ";", "return", ";", "}", "ConfigurationBuilder", "configurationBuilder", "=", "new", "ConfigurationBuilder", "(", ")", ";", "FilterBuilder", "filterBuilder", "=", "new", "FilterBuilder", "(", ")", ";", "for", "(", "String", "packageName", ":", "scanPackages", ")", "{", "configurationBuilder", ".", "addUrls", "(", "ClasspathHelper", ".", "forPackage", "(", "packageName", ")", ")", ";", "filterBuilder", ".", "include", "(", "FilterBuilder", ".", "prefix", "(", "packageName", ")", ")", ";", "}", "configurationBuilder", ".", "filterInputsBy", "(", "filterBuilder", ")", ".", "setScanners", "(", "new", "SubTypesScanner", "(", ")", ",", "new", "TypeAnnotationsScanner", "(", ")", ")", ";", "this", ".", "reflections", "=", "new", "Reflections", "(", "configurationBuilder", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "a0a8c7cebd1f70f78cf24a66a002859e937badfe", "url": "https://github.com/robeio/robe/blob/a0a8c7cebd1f70f78cf24a66a002859e937badfe/robe-guice/src/main/java/io/robe/guice/GuiceBundle.java#L93-L108", "partition": "test"}
{"repo": "Koekiebox-PTY-LTD/Fluid", "path": "fluid-api/src/main/java/com/fluidbpm/program/api/vo/form/Form.java", "func_name": "Form.getFieldValueAsDouble", "original_string": "@XmlTransient\n\tpublic Double getFieldValueAsDouble(String fieldNameParam) {\n\t\tField fieldWithName = this.getField(fieldNameParam);\n\t\treturn (fieldWithName == null) ? null : fieldWithName.getFieldValueAsDouble();\n\t}", "language": "java", "code": "@XmlTransient\n\tpublic Double getFieldValueAsDouble(String fieldNameParam) {\n\t\tField fieldWithName = this.getField(fieldNameParam);\n\t\treturn (fieldWithName == null) ? null : fieldWithName.getFieldValueAsDouble();\n\t}", "code_tokens": ["@", "XmlTransient", "public", "Double", "getFieldValueAsDouble", "(", "String", "fieldNameParam", ")", "{", "Field", "fieldWithName", "=", "this", ".", "getField", "(", "fieldNameParam", ")", ";", "return", "(", "fieldWithName", "==", "null", ")", "?", "null", ":", "fieldWithName", ".", "getFieldValueAsDouble", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "81153d865f71b84ca933532c7115717bc3979270", "url": "https://github.com/Koekiebox-PTY-LTD/Fluid/blob/81153d865f71b84ca933532c7115717bc3979270/fluid-api/src/main/java/com/fluidbpm/program/api/vo/form/Form.java#L569-L573", "partition": "test"}
{"repo": "Koekiebox-PTY-LTD/Fluid", "path": "fluid-ws-java-client/src/main/java/com/fluidbpm/ws/client/v1/sqlutil/wrapper/SQLUtilWebSocketRESTWrapper.java", "func_name": "SQLUtilWebSocketRESTWrapper.massPopulateFormFields", "original_string": "public void massPopulateFormFields(\n\t\t\tboolean includeFieldDataParam,\n\t\t\tForm ... formsToPopulateFormFieldsForParam\n\t) {\n\t\tif(DISABLE_WS) {\n\t\t\tthis.mode = Mode.RESTfulActive;\n\t\t}\n\n\t\t//FORM FIELDS...\n\t\ttry {\n\t\t\t//When mode is null or [WebSocketActive]...\n\t\t\tif(this.getFormFieldsClient == null && Mode.RESTfulActive != this.mode) {\n\t\t\t\tthis.getFormFieldsClient = new SQLUtilWebSocketGetFormFieldsClient(\n\t\t\t\t\t\tthis.baseURL,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tthis.loggedInUser.getServiceTicketAsHexUpper(),\n\t\t\t\t\t\tthis.timeoutMillis,\n\t\t\t\t\t\tincludeFieldDataParam,\n\t\t\t\t\t\tCOMPRESS_RSP,\n\t\t\t\t\t\tCOMPRESS_RSP_CHARSET);\n\n\t\t\t\tthis.mode = Mode.WebSocketActive;\n\t\t\t}\n\t\t} catch (FluidClientException clientExcept) {\n\t\t\tif(clientExcept.getErrorCode() !=\n\t\t\t\t\tFluidClientException.ErrorCode.WEB_SOCKET_DEPLOY_ERROR) {\n\t\t\t\tthrow clientExcept;\n\t\t\t}\n\n\t\t\tthis.mode = Mode.RESTfulActive;\n\t\t}\n\n\t\t//Nothing to do...\n\t\tif(formsToPopulateFormFieldsForParam == null ||\n\t\t\t\tformsToPopulateFormFieldsForParam.length < 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t//Populate a known echo for all of the local form caches...\n\t\tForm[] formsToFetchForLocalCacheArr =\n\t\t\t\tnew Form[formsToPopulateFormFieldsForParam.length];\n\t\tfor(int index = 0;index < formsToFetchForLocalCacheArr.length;index++) {\n\n\t\t\tformsToFetchForLocalCacheArr[index] = new Form(formsToPopulateFormFieldsForParam[index].getId());\n\t\t\tformsToFetchForLocalCacheArr[index].setEcho(UUID.randomUUID().toString());\n\t\t}\n\n\t\tList<FormFieldListing> listingReturnFieldValsPopulated = new ArrayList<>();\n\n\t\t//Fetch all of the values in a single go...\n\t\tif(this.getFormFieldsClient != null) {\n\t\t\tlistingReturnFieldValsPopulated =\n\t\t\t\t\tthis.getFormFieldsClient.getFormFieldsSynchronized(formsToFetchForLocalCacheArr);\n\t\t} else {\n\t\t\t//Old Rest way of fetching all of the values...\n\t\t\tfor(Form formToFetchFor : formsToFetchForLocalCacheArr) {\n\t\t\t\tList<Field> listOfFields =\n\t\t\t\t\t\tthis.sqlUtilClient.getFormFields(\n\t\t\t\t\t\t\t\tformToFetchFor,\n\t\t\t\t\t\t\t\tincludeFieldDataParam);\n\n\t\t\t\tFormFieldListing toAdd = new FormFieldListing();\n\t\t\t\ttoAdd.setListing(listOfFields);\n\t\t\t\ttoAdd.setListingCount((listOfFields == null) ? 0 : listOfFields.size());\n\t\t\t\ttoAdd.setEcho(formToFetchFor.getEcho());\n\t\t\t\tlistingReturnFieldValsPopulated.add(toAdd);\n\t\t\t}\n\t\t}\n\n\t\t//Populate each of the form from the param...\n\t\tfor(Form formToSetFieldsOn : formsToPopulateFormFieldsForParam) {\n\t\t\tformToSetFieldsOn.setFormFields(\n\t\t\t\t\tthis.getFieldValuesForFormFromCache(\n\t\t\t\t\t\t\tformToSetFieldsOn.getId(),\n\t\t\t\t\t\t\tlistingReturnFieldValsPopulated,\n\t\t\t\t\t\t\tformsToFetchForLocalCacheArr));\n\t\t}\n\t}", "language": "java", "code": "public void massPopulateFormFields(\n\t\t\tboolean includeFieldDataParam,\n\t\t\tForm ... formsToPopulateFormFieldsForParam\n\t) {\n\t\tif(DISABLE_WS) {\n\t\t\tthis.mode = Mode.RESTfulActive;\n\t\t}\n\n\t\t//FORM FIELDS...\n\t\ttry {\n\t\t\t//When mode is null or [WebSocketActive]...\n\t\t\tif(this.getFormFieldsClient == null && Mode.RESTfulActive != this.mode) {\n\t\t\t\tthis.getFormFieldsClient = new SQLUtilWebSocketGetFormFieldsClient(\n\t\t\t\t\t\tthis.baseURL,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tthis.loggedInUser.getServiceTicketAsHexUpper(),\n\t\t\t\t\t\tthis.timeoutMillis,\n\t\t\t\t\t\tincludeFieldDataParam,\n\t\t\t\t\t\tCOMPRESS_RSP,\n\t\t\t\t\t\tCOMPRESS_RSP_CHARSET);\n\n\t\t\t\tthis.mode = Mode.WebSocketActive;\n\t\t\t}\n\t\t} catch (FluidClientException clientExcept) {\n\t\t\tif(clientExcept.getErrorCode() !=\n\t\t\t\t\tFluidClientException.ErrorCode.WEB_SOCKET_DEPLOY_ERROR) {\n\t\t\t\tthrow clientExcept;\n\t\t\t}\n\n\t\t\tthis.mode = Mode.RESTfulActive;\n\t\t}\n\n\t\t//Nothing to do...\n\t\tif(formsToPopulateFormFieldsForParam == null ||\n\t\t\t\tformsToPopulateFormFieldsForParam.length < 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t//Populate a known echo for all of the local form caches...\n\t\tForm[] formsToFetchForLocalCacheArr =\n\t\t\t\tnew Form[formsToPopulateFormFieldsForParam.length];\n\t\tfor(int index = 0;index < formsToFetchForLocalCacheArr.length;index++) {\n\n\t\t\tformsToFetchForLocalCacheArr[index] = new Form(formsToPopulateFormFieldsForParam[index].getId());\n\t\t\tformsToFetchForLocalCacheArr[index].setEcho(UUID.randomUUID().toString());\n\t\t}\n\n\t\tList<FormFieldListing> listingReturnFieldValsPopulated = new ArrayList<>();\n\n\t\t//Fetch all of the values in a single go...\n\t\tif(this.getFormFieldsClient != null) {\n\t\t\tlistingReturnFieldValsPopulated =\n\t\t\t\t\tthis.getFormFieldsClient.getFormFieldsSynchronized(formsToFetchForLocalCacheArr);\n\t\t} else {\n\t\t\t//Old Rest way of fetching all of the values...\n\t\t\tfor(Form formToFetchFor : formsToFetchForLocalCacheArr) {\n\t\t\t\tList<Field> listOfFields =\n\t\t\t\t\t\tthis.sqlUtilClient.getFormFields(\n\t\t\t\t\t\t\t\tformToFetchFor,\n\t\t\t\t\t\t\t\tincludeFieldDataParam);\n\n\t\t\t\tFormFieldListing toAdd = new FormFieldListing();\n\t\t\t\ttoAdd.setListing(listOfFields);\n\t\t\t\ttoAdd.setListingCount((listOfFields == null) ? 0 : listOfFields.size());\n\t\t\t\ttoAdd.setEcho(formToFetchFor.getEcho());\n\t\t\t\tlistingReturnFieldValsPopulated.add(toAdd);\n\t\t\t}\n\t\t}\n\n\t\t//Populate each of the form from the param...\n\t\tfor(Form formToSetFieldsOn : formsToPopulateFormFieldsForParam) {\n\t\t\tformToSetFieldsOn.setFormFields(\n\t\t\t\t\tthis.getFieldValuesForFormFromCache(\n\t\t\t\t\t\t\tformToSetFieldsOn.getId(),\n\t\t\t\t\t\t\tlistingReturnFieldValsPopulated,\n\t\t\t\t\t\t\tformsToFetchForLocalCacheArr));\n\t\t}\n\t}", "code_tokens": ["public", "void", "massPopulateFormFields", "(", "boolean", "includeFieldDataParam", ",", "Form", "...", "formsToPopulateFormFieldsForParam", ")", "{", "if", "(", "DISABLE_WS", ")", "{", "this", ".", "mode", "=", "Mode", ".", "RESTfulActive", ";", "}", "//FORM FIELDS...", "try", "{", "//When mode is null or [WebSocketActive]...", "if", "(", "this", ".", "getFormFieldsClient", "==", "null", "&&", "Mode", ".", "RESTfulActive", "!=", "this", ".", "mode", ")", "{", "this", ".", "getFormFieldsClient", "=", "new", "SQLUtilWebSocketGetFormFieldsClient", "(", "this", ".", "baseURL", ",", "null", ",", "this", ".", "loggedInUser", ".", "getServiceTicketAsHexUpper", "(", ")", ",", "this", ".", "timeoutMillis", ",", "includeFieldDataParam", ",", "COMPRESS_RSP", ",", "COMPRESS_RSP_CHARSET", ")", ";", "this", ".", "mode", "=", "Mode", ".", "WebSocketActive", ";", "}", "}", "catch", "(", "FluidClientException", "clientExcept", ")", "{", "if", "(", "clientExcept", ".", "getErrorCode", "(", ")", "!=", "FluidClientException", ".", "ErrorCode", ".", "WEB_SOCKET_DEPLOY_ERROR", ")", "{", "throw", "clientExcept", ";", "}", "this", ".", "mode", "=", "Mode", ".", "RESTfulActive", ";", "}", "//Nothing to do...", "if", "(", "formsToPopulateFormFieldsForParam", "==", "null", "||", "formsToPopulateFormFieldsForParam", ".", "length", "<", "1", ")", "{", "return", ";", "}", "//Populate a known echo for all of the local form caches...", "Form", "[", "]", "formsToFetchForLocalCacheArr", "=", "new", "Form", "[", "formsToPopulateFormFieldsForParam", ".", "length", "]", ";", "for", "(", "int", "index", "=", "0", ";", "index", "<", "formsToFetchForLocalCacheArr", ".", "length", ";", "index", "++", ")", "{", "formsToFetchForLocalCacheArr", "[", "index", "]", "=", "new", "Form", "(", "formsToPopulateFormFieldsForParam", "[", "index", "]", ".", "getId", "(", ")", ")", ";", "formsToFetchForLocalCacheArr", "[", "index", "]", ".", "setEcho", "(", "UUID", ".", "randomUUID", "(", ")", ".", "toString", "(", ")", ")", ";", "}", "List", "<", "FormFieldListing", ">", "listingReturnFieldValsPopulated", "=", "new", "ArrayList", "<>", "(", ")", ";", "//Fetch all of the values in a single go...", "if", "(", "this", ".", "getFormFieldsClient", "!=", "null", ")", "{", "listingReturnFieldValsPopulated", "=", "this", ".", "getFormFieldsClient", ".", "getFormFieldsSynchronized", "(", "formsToFetchForLocalCacheArr", ")", ";", "}", "else", "{", "//Old Rest way of fetching all of the values...", "for", "(", "Form", "formToFetchFor", ":", "formsToFetchForLocalCacheArr", ")", "{", "List", "<", "Field", ">", "listOfFields", "=", "this", ".", "sqlUtilClient", ".", "getFormFields", "(", "formToFetchFor", ",", "includeFieldDataParam", ")", ";", "FormFieldListing", "toAdd", "=", "new", "FormFieldListing", "(", ")", ";", "toAdd", ".", "setListing", "(", "listOfFields", ")", ";", "toAdd", ".", "setListingCount", "(", "(", "listOfFields", "==", "null", ")", "?", "0", ":", "listOfFields", ".", "size", "(", ")", ")", ";", "toAdd", ".", "setEcho", "(", "formToFetchFor", ".", "getEcho", "(", ")", ")", ";", "listingReturnFieldValsPopulated", ".", "add", "(", "toAdd", ")", ";", "}", "}", "//Populate each of the form from the param...", "for", "(", "Form", "formToSetFieldsOn", ":", "formsToPopulateFormFieldsForParam", ")", "{", "formToSetFieldsOn", ".", "setFormFields", "(", "this", ".", "getFieldValuesForFormFromCache", "(", "formToSetFieldsOn", ".", "getId", "(", ")", ",", "listingReturnFieldValsPopulated", ",", "formsToFetchForLocalCacheArr", ")", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "81153d865f71b84ca933532c7115717bc3979270", "url": "https://github.com/Koekiebox-PTY-LTD/Fluid/blob/81153d865f71b84ca933532c7115717bc3979270/fluid-ws-java-client/src/main/java/com/fluidbpm/ws/client/v1/sqlutil/wrapper/SQLUtilWebSocketRESTWrapper.java#L429-L506", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-core/src/main/java/jodd/io/StreamUtil.java", "func_name": "StreamUtil.close", "original_string": "public static void close(final Closeable closeable) {\n\t\tif (closeable != null) {\n\t\t\tif (closeable instanceof Flushable) {\n\t\t\t\ttry {\n\t\t\t\t\t((Flushable) closeable).flush();\n\t\t\t\t} catch (IOException ignored) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcloseable.close();\n\t\t\t} catch (IOException ignored) {\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public static void close(final Closeable closeable) {\n\t\tif (closeable != null) {\n\t\t\tif (closeable instanceof Flushable) {\n\t\t\t\ttry {\n\t\t\t\t\t((Flushable) closeable).flush();\n\t\t\t\t} catch (IOException ignored) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcloseable.close();\n\t\t\t} catch (IOException ignored) {\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "close", "(", "final", "Closeable", "closeable", ")", "{", "if", "(", "closeable", "!=", "null", ")", "{", "if", "(", "closeable", "instanceof", "Flushable", ")", "{", "try", "{", "(", "(", "Flushable", ")", "closeable", ")", ".", "flush", "(", ")", ";", "}", "catch", "(", "IOException", "ignored", ")", "{", "}", "}", "try", "{", "closeable", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "ignored", ")", "{", "}", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-core/src/main/java/jodd/io/StreamUtil.java#L59-L73", "partition": "test"}
{"repo": "wro4j/wro4j", "path": "wro4j-core/src/main/java/ro/isdc/wro/util/WroUtil.java", "func_name": "WroUtil.matchesUrl", "original_string": "public static boolean matchesUrl(final HttpServletRequest request, final String path) {\r\n    final Pattern pattern = Pattern.compile(\".*\" + path + \"[/]?\", Pattern.CASE_INSENSITIVE);\r\n    if (request.getRequestURI() != null) {\r\n      final Matcher m = pattern.matcher(request.getRequestURI());\r\n      return m.matches();\r\n    }\r\n    return false;\r\n  }", "language": "java", "code": "public static boolean matchesUrl(final HttpServletRequest request, final String path) {\r\n    final Pattern pattern = Pattern.compile(\".*\" + path + \"[/]?\", Pattern.CASE_INSENSITIVE);\r\n    if (request.getRequestURI() != null) {\r\n      final Matcher m = pattern.matcher(request.getRequestURI());\r\n      return m.matches();\r\n    }\r\n    return false;\r\n  }", "code_tokens": ["public", "static", "boolean", "matchesUrl", "(", "final", "HttpServletRequest", "request", ",", "final", "String", "path", ")", "{", "final", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\".*\"", "+", "path", "+", "\"[/]?\"", ",", "Pattern", ".", "CASE_INSENSITIVE", ")", ";", "if", "(", "request", ".", "getRequestURI", "(", ")", "!=", "null", ")", "{", "final", "Matcher", "m", "=", "pattern", ".", "matcher", "(", "request", ".", "getRequestURI", "(", ")", ")", ";", "return", "m", ".", "matches", "(", ")", ";", "}", "return", "false", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2a3de71ab8bf0af7061fb6327501e08198338df", "url": "https://github.com/wro4j/wro4j/blob/d2a3de71ab8bf0af7061fb6327501e08198338df/wro4j-core/src/main/java/ro/isdc/wro/util/WroUtil.java#L263-L270", "partition": "test"}
{"repo": "alexruiz/fest-assert-1.x", "path": "src/main/java/org/fest/assertions/LongAssert.java", "func_name": "LongAssert.isGreaterThan", "original_string": "public @NotNull LongAssert isGreaterThan(long other) {\n    if (actual > other) {\n      return this;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(unexpectedLessThanOrEqualTo(actual, other));\n  }", "language": "java", "code": "public @NotNull LongAssert isGreaterThan(long other) {\n    if (actual > other) {\n      return this;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(unexpectedLessThanOrEqualTo(actual, other));\n  }", "code_tokens": ["public", "@", "NotNull", "LongAssert", "isGreaterThan", "(", "long", "other", ")", "{", "if", "(", "actual", ">", "other", ")", "{", "return", "this", ";", "}", "failIfCustomMessageIsSet", "(", ")", ";", "throw", "failure", "(", "unexpectedLessThanOrEqualTo", "(", "actual", ",", "other", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "f026c3059c8b2e40052f0388309cace819ac93a4", "url": "https://github.com/alexruiz/fest-assert-1.x/blob/f026c3059c8b2e40052f0388309cace819ac93a4/src/main/java/org/fest/assertions/LongAssert.java#L84-L90", "partition": "valid"}
{"repo": "spring-projects/spring-security", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.java", "func_name": "WebSecurityConfigurerAdapter.getHttp", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprotected final HttpSecurity getHttp() throws Exception {\n\t\tif (http != null) {\n\t\t\treturn http;\n\t\t}\n\n\t\tDefaultAuthenticationEventPublisher eventPublisher = objectPostProcessor\n\t\t\t\t.postProcess(new DefaultAuthenticationEventPublisher());\n\t\tlocalConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);\n\n\t\tAuthenticationManager authenticationManager = authenticationManager();\n\t\tauthenticationBuilder.parentAuthenticationManager(authenticationManager);\n\t\tauthenticationBuilder.authenticationEventPublisher(eventPublisher);\n\t\tMap<Class<? extends Object>, Object> sharedObjects = createSharedObjects();\n\n\t\thttp = new HttpSecurity(objectPostProcessor, authenticationBuilder,\n\t\t\t\tsharedObjects);\n\t\tif (!disableDefaults) {\n\t\t\t// @formatter:off\n\t\t\thttp\n\t\t\t\t.csrf().and()\n\t\t\t\t.addFilter(new WebAsyncManagerIntegrationFilter())\n\t\t\t\t.exceptionHandling().and()\n\t\t\t\t.headers().and()\n\t\t\t\t.sessionManagement().and()\n\t\t\t\t.securityContext().and()\n\t\t\t\t.requestCache().and()\n\t\t\t\t.anonymous().and()\n\t\t\t\t.servletApi().and()\n\t\t\t\t.apply(new DefaultLoginPageConfigurer<>()).and()\n\t\t\t\t.logout();\n\t\t\t// @formatter:on\n\t\t\tClassLoader classLoader = this.context.getClassLoader();\n\t\t\tList<AbstractHttpConfigurer> defaultHttpConfigurers =\n\t\t\t\t\tSpringFactoriesLoader.loadFactories(AbstractHttpConfigurer.class, classLoader);\n\n\t\t\tfor (AbstractHttpConfigurer configurer : defaultHttpConfigurers) {\n\t\t\t\thttp.apply(configurer);\n\t\t\t}\n\t\t}\n\t\tconfigure(http);\n\t\treturn http;\n\t}", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprotected final HttpSecurity getHttp() throws Exception {\n\t\tif (http != null) {\n\t\t\treturn http;\n\t\t}\n\n\t\tDefaultAuthenticationEventPublisher eventPublisher = objectPostProcessor\n\t\t\t\t.postProcess(new DefaultAuthenticationEventPublisher());\n\t\tlocalConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);\n\n\t\tAuthenticationManager authenticationManager = authenticationManager();\n\t\tauthenticationBuilder.parentAuthenticationManager(authenticationManager);\n\t\tauthenticationBuilder.authenticationEventPublisher(eventPublisher);\n\t\tMap<Class<? extends Object>, Object> sharedObjects = createSharedObjects();\n\n\t\thttp = new HttpSecurity(objectPostProcessor, authenticationBuilder,\n\t\t\t\tsharedObjects);\n\t\tif (!disableDefaults) {\n\t\t\t// @formatter:off\n\t\t\thttp\n\t\t\t\t.csrf().and()\n\t\t\t\t.addFilter(new WebAsyncManagerIntegrationFilter())\n\t\t\t\t.exceptionHandling().and()\n\t\t\t\t.headers().and()\n\t\t\t\t.sessionManagement().and()\n\t\t\t\t.securityContext().and()\n\t\t\t\t.requestCache().and()\n\t\t\t\t.anonymous().and()\n\t\t\t\t.servletApi().and()\n\t\t\t\t.apply(new DefaultLoginPageConfigurer<>()).and()\n\t\t\t\t.logout();\n\t\t\t// @formatter:on\n\t\t\tClassLoader classLoader = this.context.getClassLoader();\n\t\t\tList<AbstractHttpConfigurer> defaultHttpConfigurers =\n\t\t\t\t\tSpringFactoriesLoader.loadFactories(AbstractHttpConfigurer.class, classLoader);\n\n\t\t\tfor (AbstractHttpConfigurer configurer : defaultHttpConfigurers) {\n\t\t\t\thttp.apply(configurer);\n\t\t\t}\n\t\t}\n\t\tconfigure(http);\n\t\treturn http;\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "protected", "final", "HttpSecurity", "getHttp", "(", ")", "throws", "Exception", "{", "if", "(", "http", "!=", "null", ")", "{", "return", "http", ";", "}", "DefaultAuthenticationEventPublisher", "eventPublisher", "=", "objectPostProcessor", ".", "postProcess", "(", "new", "DefaultAuthenticationEventPublisher", "(", ")", ")", ";", "localConfigureAuthenticationBldr", ".", "authenticationEventPublisher", "(", "eventPublisher", ")", ";", "AuthenticationManager", "authenticationManager", "=", "authenticationManager", "(", ")", ";", "authenticationBuilder", ".", "parentAuthenticationManager", "(", "authenticationManager", ")", ";", "authenticationBuilder", ".", "authenticationEventPublisher", "(", "eventPublisher", ")", ";", "Map", "<", "Class", "<", "?", "extends", "Object", ">", ",", "Object", ">", "sharedObjects", "=", "createSharedObjects", "(", ")", ";", "http", "=", "new", "HttpSecurity", "(", "objectPostProcessor", ",", "authenticationBuilder", ",", "sharedObjects", ")", ";", "if", "(", "!", "disableDefaults", ")", "{", "// @formatter:off", "http", ".", "csrf", "(", ")", ".", "and", "(", ")", ".", "addFilter", "(", "new", "WebAsyncManagerIntegrationFilter", "(", ")", ")", ".", "exceptionHandling", "(", ")", ".", "and", "(", ")", ".", "headers", "(", ")", ".", "and", "(", ")", ".", "sessionManagement", "(", ")", ".", "and", "(", ")", ".", "securityContext", "(", ")", ".", "and", "(", ")", ".", "requestCache", "(", ")", ".", "and", "(", ")", ".", "anonymous", "(", ")", ".", "and", "(", ")", ".", "servletApi", "(", ")", ".", "and", "(", ")", ".", "apply", "(", "new", "DefaultLoginPageConfigurer", "<>", "(", ")", ")", ".", "and", "(", ")", ".", "logout", "(", ")", ";", "// @formatter:on", "ClassLoader", "classLoader", "=", "this", ".", "context", ".", "getClassLoader", "(", ")", ";", "List", "<", "AbstractHttpConfigurer", ">", "defaultHttpConfigurers", "=", "SpringFactoriesLoader", ".", "loadFactories", "(", "AbstractHttpConfigurer", ".", "class", ",", "classLoader", ")", ";", "for", "(", "AbstractHttpConfigurer", "configurer", ":", "defaultHttpConfigurers", ")", "{", "http", ".", "apply", "(", "configurer", ")", ";", "}", "}", "configure", "(", "http", ")", ";", "return", "http", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "98a8467e4c2ae05b3e09c67ece856944fa48ed23", "url": "https://github.com/spring-projects/spring-security/blob/98a8467e4c2ae05b3e09c67ece856944fa48ed23/config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.java#L191-L233", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.window", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<Observable<T>> window(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler, int bufferSize) {\n        ObjectHelper.verifyPositive(timespan, \"timespan\");\n        ObjectHelper.verifyPositive(timeskip, \"timeskip\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n        ObjectHelper.requireNonNull(unit, \"unit is null\");\n        return RxJavaPlugins.onAssembly(new ObservableWindowTimed<T>(this, timespan, timeskip, unit, scheduler, Long.MAX_VALUE, bufferSize, false));\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<Observable<T>> window(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler, int bufferSize) {\n        ObjectHelper.verifyPositive(timespan, \"timespan\");\n        ObjectHelper.verifyPositive(timeskip, \"timeskip\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n        ObjectHelper.requireNonNull(unit, \"unit is null\");\n        return RxJavaPlugins.onAssembly(new ObservableWindowTimed<T>(this, timespan, timeskip, unit, scheduler, Long.MAX_VALUE, bufferSize, false));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "CUSTOM", ")", "public", "final", "Observable", "<", "Observable", "<", "T", ">", ">", "window", "(", "long", "timespan", ",", "long", "timeskip", ",", "TimeUnit", "unit", ",", "Scheduler", "scheduler", ",", "int", "bufferSize", ")", "{", "ObjectHelper", ".", "verifyPositive", "(", "timespan", ",", "\"timespan\"", ")", ";", "ObjectHelper", ".", "verifyPositive", "(", "timeskip", ",", "\"timeskip\"", ")", ";", "ObjectHelper", ".", "verifyPositive", "(", "bufferSize", ",", "\"bufferSize\"", ")", ";", "ObjectHelper", ".", "requireNonNull", "(", "scheduler", ",", "\"scheduler is null\"", ")", ";", "ObjectHelper", ".", "requireNonNull", "(", "unit", ",", "\"unit is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableWindowTimed", "<", "T", ">", "(", "this", ",", "timespan", ",", "timeskip", ",", "unit", ",", "scheduler", ",", "Long", ".", "MAX_VALUE", ",", "bufferSize", ",", "false", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L14642-L14651", "partition": "test"}
{"repo": "Unidata/thredds", "path": "dap4/d4servlet/src/main/java/dap4/servlet/RandomValue.java", "func_name": "RandomValue.nextFloat", "original_string": "public Object\n    nextFloat(DapType basetype)\n            throws DapException\n    {\n        TypeSort atomtype = basetype.getTypeSort();\n        switch (atomtype) {\n        case Float32:\n            return new float[]{random.nextFloat()};\n        case Float64:\n            return new double[]{random.nextDouble()};\n        default:\n            break;\n        }\n        throw new DapException(\"Unexpected type: \" + basetype);\n    }", "language": "java", "code": "public Object\n    nextFloat(DapType basetype)\n            throws DapException\n    {\n        TypeSort atomtype = basetype.getTypeSort();\n        switch (atomtype) {\n        case Float32:\n            return new float[]{random.nextFloat()};\n        case Float64:\n            return new double[]{random.nextDouble()};\n        default:\n            break;\n        }\n        throw new DapException(\"Unexpected type: \" + basetype);\n    }", "code_tokens": ["public", "Object", "nextFloat", "(", "DapType", "basetype", ")", "throws", "DapException", "{", "TypeSort", "atomtype", "=", "basetype", ".", "getTypeSort", "(", ")", ";", "switch", "(", "atomtype", ")", "{", "case", "Float32", ":", "return", "new", "float", "[", "]", "{", "random", ".", "nextFloat", "(", ")", "}", ";", "case", "Float64", ":", "return", "new", "double", "[", "]", "{", "random", ".", "nextDouble", "(", ")", "}", ";", "default", ":", "break", ";", "}", "throw", "new", "DapException", "(", "\"Unexpected type: \"", "+", "basetype", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/dap4/d4servlet/src/main/java/dap4/servlet/RandomValue.java#L137-L151", "partition": "test"}
{"repo": "nutzam/nutz", "path": "src/org/nutz/repo/org/objectweb/asm/MethodVisitor.java", "func_name": "MethodVisitor.visitTypeInsn", "original_string": "public void visitTypeInsn(int opcode, String type) {\n        if (mv != null) {\n            mv.visitTypeInsn(opcode, type);\n        }\n    }", "language": "java", "code": "public void visitTypeInsn(int opcode, String type) {\n        if (mv != null) {\n            mv.visitTypeInsn(opcode, type);\n        }\n    }", "code_tokens": ["public", "void", "visitTypeInsn", "(", "int", "opcode", ",", "String", "type", ")", "{", "if", "(", "mv", "!=", "null", ")", "{", "mv", ".", "visitTypeInsn", "(", "opcode", ",", "type", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "a38694d5cbda2692e7931ab093c168487a6a4bfe", "url": "https://github.com/nutzam/nutz/blob/a38694d5cbda2692e7931ab093c168487a6a4bfe/src/org/nutz/repo/org/objectweb/asm/MethodVisitor.java#L399-L403", "partition": "valid"}
{"repo": "Azure/azure-storage-android", "path": "microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntitySerializer.java", "func_name": "TableEntitySerializer.writeSingleEntity", "original_string": "static void writeSingleEntity(final OutputStream outStream, final TableEntity entity, final boolean isTableEntry,\n            final OperationContext opContext) throws StorageException, IOException {\n        JsonGenerator generator = jsonFactory.createGenerator(outStream);\n\n        try {\n            // write to stream\n            writeJsonEntity(generator, entity, isTableEntry, opContext);\n        }\n        finally {\n            generator.close();\n        }\n    }", "language": "java", "code": "static void writeSingleEntity(final OutputStream outStream, final TableEntity entity, final boolean isTableEntry,\n            final OperationContext opContext) throws StorageException, IOException {\n        JsonGenerator generator = jsonFactory.createGenerator(outStream);\n\n        try {\n            // write to stream\n            writeJsonEntity(generator, entity, isTableEntry, opContext);\n        }\n        finally {\n            generator.close();\n        }\n    }", "code_tokens": ["static", "void", "writeSingleEntity", "(", "final", "OutputStream", "outStream", ",", "final", "TableEntity", "entity", ",", "final", "boolean", "isTableEntry", ",", "final", "OperationContext", "opContext", ")", "throws", "StorageException", ",", "IOException", "{", "JsonGenerator", "generator", "=", "jsonFactory", ".", "createGenerator", "(", "outStream", ")", ";", "try", "{", "// write to stream", "writeJsonEntity", "(", "generator", ",", "entity", ",", "isTableEntry", ",", "opContext", ")", ";", "}", "finally", "{", "generator", ".", "close", "(", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "2c643c37c6b8c9081058add284c601a2393afc93", "url": "https://github.com/Azure/azure-storage-android/blob/2c643c37c6b8c9081058add284c601a2393afc93/microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEntitySerializer.java#L58-L69", "partition": "valid"}
{"repo": "artclarke/humble-video", "path": "humble-video-noarch/src/main/java/io/humble/video/Codec.java", "func_name": "Codec.getSupportedAudioChannelLayouts", "original_string": "public java.util.Collection<AudioChannel.Layout>\n  getSupportedAudioChannelLayouts()\n  {\n    java.util.List<AudioChannel.Layout> retval =\n      new java.util.LinkedList<AudioChannel.Layout>();\n    int count = getNumSupportedAudioChannelLayouts();\n    for(int i=0;i<count;i++)\n    {\n      AudioChannel.Layout layout = getSupportedAudioChannelLayout(i);\n      if (layout != AudioChannel.Layout.CH_LAYOUT_UNKNOWN)\n        retval.add(layout);\n    }\n    return retval;\n  }", "language": "java", "code": "public java.util.Collection<AudioChannel.Layout>\n  getSupportedAudioChannelLayouts()\n  {\n    java.util.List<AudioChannel.Layout> retval =\n      new java.util.LinkedList<AudioChannel.Layout>();\n    int count = getNumSupportedAudioChannelLayouts();\n    for(int i=0;i<count;i++)\n    {\n      AudioChannel.Layout layout = getSupportedAudioChannelLayout(i);\n      if (layout != AudioChannel.Layout.CH_LAYOUT_UNKNOWN)\n        retval.add(layout);\n    }\n    return retval;\n  }", "code_tokens": ["public", "java", ".", "util", ".", "Collection", "<", "AudioChannel", ".", "Layout", ">", "getSupportedAudioChannelLayouts", "(", ")", "{", "java", ".", "util", ".", "List", "<", "AudioChannel", ".", "Layout", ">", "retval", "=", "new", "java", ".", "util", ".", "LinkedList", "<", "AudioChannel", ".", "Layout", ">", "(", ")", ";", "int", "count", "=", "getNumSupportedAudioChannelLayouts", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "count", ";", "i", "++", ")", "{", "AudioChannel", ".", "Layout", "layout", "=", "getSupportedAudioChannelLayout", "(", "i", ")", ";", "if", "(", "layout", "!=", "AudioChannel", ".", "Layout", ".", "CH_LAYOUT_UNKNOWN", ")", "retval", ".", "add", "(", "layout", ")", ";", "}", "return", "retval", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "aa349ae2d7ef74160b7074feac8d298cf90394d1", "url": "https://github.com/artclarke/humble-video/blob/aa349ae2d7ef74160b7074feac8d298cf90394d1/humble-video-noarch/src/main/java/io/humble/video/Codec.java#L284-L297", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java", "func_name": "ObservableBlockingSubscribe.subscribe", "original_string": "public static <T> void subscribe(ObservableSource<? extends T> o, final Consumer<? super T> onNext,\n            final Consumer<? super Throwable> onError, final Action onComplete) {\n        ObjectHelper.requireNonNull(onNext, \"onNext is null\");\n        ObjectHelper.requireNonNull(onError, \"onError is null\");\n        ObjectHelper.requireNonNull(onComplete, \"onComplete is null\");\n        subscribe(o, new LambdaObserver<T>(onNext, onError, onComplete, Functions.emptyConsumer()));\n    }", "language": "java", "code": "public static <T> void subscribe(ObservableSource<? extends T> o, final Consumer<? super T> onNext,\n            final Consumer<? super Throwable> onError, final Action onComplete) {\n        ObjectHelper.requireNonNull(onNext, \"onNext is null\");\n        ObjectHelper.requireNonNull(onError, \"onError is null\");\n        ObjectHelper.requireNonNull(onComplete, \"onComplete is null\");\n        subscribe(o, new LambdaObserver<T>(onNext, onError, onComplete, Functions.emptyConsumer()));\n    }", "code_tokens": ["public", "static", "<", "T", ">", "void", "subscribe", "(", "ObservableSource", "<", "?", "extends", "T", ">", "o", ",", "final", "Consumer", "<", "?", "super", "T", ">", "onNext", ",", "final", "Consumer", "<", "?", "super", "Throwable", ">", "onError", ",", "final", "Action", "onComplete", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "onNext", ",", "\"onNext is null\"", ")", ";", "ObjectHelper", ".", "requireNonNull", "(", "onError", ",", "\"onError is null\"", ")", ";", "ObjectHelper", ".", "requireNonNull", "(", "onComplete", ",", "\"onComplete is null\"", ")", ";", "subscribe", "(", "o", ",", "new", "LambdaObserver", "<", "T", ">", "(", "onNext", ",", "onError", ",", "onComplete", ",", "Functions", ".", "emptyConsumer", "(", ")", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/operators/observable/ObservableBlockingSubscribe.java#L98-L104", "partition": "test"}
{"repo": "sialcasa/mvvmFX", "path": "mvvmfx/src/main/java/de/saxsys/mvvmfx/utils/itemlist/ListTransformation.java", "func_name": "ListTransformation.initListEvents", "original_string": "private void initListEvents() {\n\t\tthis.listChangeListener = new ListChangeListener<SourceType>() {\n\t\t\t@Override\n\t\t\tpublic void onChanged(\n\t\t\t\t\tChange<? extends SourceType> listEvent) {\n\t\t\t\t\n\t\t\t\t// We have to stage delete events, because if we process them\n\t\t\t\t// separately, there will be unwanted ChangeEvents on the\n\t\t\t\t// targetList\n\t\t\t\tList<TargetType> deleteStaging = new ArrayList<>();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twhile (listEvent.next()) {\n\t\t\t\t\tif (listEvent.wasUpdated()) {\n\t\t\t\t\t\tprocessUpdateEvent(listEvent);\n\t\t\t\t\t} else if (listEvent.wasReplaced()) {\n\t\t\t\t\t\tprocessReplaceEvent(listEvent, deleteStaging);\n\t\t\t\t\t} else if (listEvent.wasAdded()) {\n\t\t\t\t\t\tprocessAddEvent(listEvent);\n\t\t\t\t\t} else if (listEvent.wasRemoved()) {\n\t\t\t\t\t\tprocessRemoveEvent(listEvent, deleteStaging);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Process the staged elements\n\t\t\t\tprocessStagingLists(deleteStaging);\n\t\t\t}\n\t\t};\n\t\tmodelListProperty().addListener(\n\t\t\t\tnew WeakListChangeListener<>(listChangeListener));\n\t\t\n\t}", "language": "java", "code": "private void initListEvents() {\n\t\tthis.listChangeListener = new ListChangeListener<SourceType>() {\n\t\t\t@Override\n\t\t\tpublic void onChanged(\n\t\t\t\t\tChange<? extends SourceType> listEvent) {\n\t\t\t\t\n\t\t\t\t// We have to stage delete events, because if we process them\n\t\t\t\t// separately, there will be unwanted ChangeEvents on the\n\t\t\t\t// targetList\n\t\t\t\tList<TargetType> deleteStaging = new ArrayList<>();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twhile (listEvent.next()) {\n\t\t\t\t\tif (listEvent.wasUpdated()) {\n\t\t\t\t\t\tprocessUpdateEvent(listEvent);\n\t\t\t\t\t} else if (listEvent.wasReplaced()) {\n\t\t\t\t\t\tprocessReplaceEvent(listEvent, deleteStaging);\n\t\t\t\t\t} else if (listEvent.wasAdded()) {\n\t\t\t\t\t\tprocessAddEvent(listEvent);\n\t\t\t\t\t} else if (listEvent.wasRemoved()) {\n\t\t\t\t\t\tprocessRemoveEvent(listEvent, deleteStaging);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Process the staged elements\n\t\t\t\tprocessStagingLists(deleteStaging);\n\t\t\t}\n\t\t};\n\t\tmodelListProperty().addListener(\n\t\t\t\tnew WeakListChangeListener<>(listChangeListener));\n\t\t\n\t}", "code_tokens": ["private", "void", "initListEvents", "(", ")", "{", "this", ".", "listChangeListener", "=", "new", "ListChangeListener", "<", "SourceType", ">", "(", ")", "{", "@", "Override", "public", "void", "onChanged", "(", "Change", "<", "?", "extends", "SourceType", ">", "listEvent", ")", "{", "// We have to stage delete events, because if we process them", "// separately, there will be unwanted ChangeEvents on the", "// targetList", "List", "<", "TargetType", ">", "deleteStaging", "=", "new", "ArrayList", "<>", "(", ")", ";", "while", "(", "listEvent", ".", "next", "(", ")", ")", "{", "if", "(", "listEvent", ".", "wasUpdated", "(", ")", ")", "{", "processUpdateEvent", "(", "listEvent", ")", ";", "}", "else", "if", "(", "listEvent", ".", "wasReplaced", "(", ")", ")", "{", "processReplaceEvent", "(", "listEvent", ",", "deleteStaging", ")", ";", "}", "else", "if", "(", "listEvent", ".", "wasAdded", "(", ")", ")", "{", "processAddEvent", "(", "listEvent", ")", ";", "}", "else", "if", "(", "listEvent", ".", "wasRemoved", "(", ")", ")", "{", "processRemoveEvent", "(", "listEvent", ",", "deleteStaging", ")", ";", "}", "}", "// Process the staged elements", "processStagingLists", "(", "deleteStaging", ")", ";", "}", "}", ";", "modelListProperty", "(", ")", ".", "addListener", "(", "new", "WeakListChangeListener", "<>", "(", "listChangeListener", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "240566a358a8e01c94c0bbb99228140a69690d02", "url": "https://github.com/sialcasa/mvvmFX/blob/240566a358a8e01c94c0bbb99228140a69690d02/mvvmfx/src/main/java/de/saxsys/mvvmfx/utils/itemlist/ListTransformation.java#L81-L112", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Completable.java", "func_name": "Completable.wrap", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static Completable wrap(CompletableSource source) {\n        ObjectHelper.requireNonNull(source, \"source is null\");\n        if (source instanceof Completable) {\n            return RxJavaPlugins.onAssembly((Completable)source);\n        }\n        return RxJavaPlugins.onAssembly(new CompletableFromUnsafeSource(source));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static Completable wrap(CompletableSource source) {\n        ObjectHelper.requireNonNull(source, \"source is null\");\n        if (source instanceof Completable) {\n            return RxJavaPlugins.onAssembly((Completable)source);\n        }\n        return RxJavaPlugins.onAssembly(new CompletableFromUnsafeSource(source));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "Completable", "wrap", "(", "CompletableSource", "source", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "source", ",", "\"source is null\"", ")", ";", "if", "(", "source", "instanceof", "Completable", ")", "{", "return", "RxJavaPlugins", ".", "onAssembly", "(", "(", "Completable", ")", "source", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "CompletableFromUnsafeSource", "(", "source", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Completable.java#L1030-L1039", "partition": "test"}
{"repo": "eclipse/packagedrone", "path": "bundles/org.apache.jasper.glassfish/src/org/apache/jasper/JspC.java", "func_name": "JspC.setJspFiles", "original_string": "public void setJspFiles(String jspFiles) {\n        StringTokenizer tok = new StringTokenizer(jspFiles, \" ,\");\n        while (tok.hasMoreTokens()) {\n            pages.add(tok.nextToken());\n        }\n    }", "language": "java", "code": "public void setJspFiles(String jspFiles) {\n        StringTokenizer tok = new StringTokenizer(jspFiles, \" ,\");\n        while (tok.hasMoreTokens()) {\n            pages.add(tok.nextToken());\n        }\n    }", "code_tokens": ["public", "void", "setJspFiles", "(", "String", "jspFiles", ")", "{", "StringTokenizer", "tok", "=", "new", "StringTokenizer", "(", "jspFiles", ",", "\" ,\"", ")", ";", "while", "(", "tok", ".", "hasMoreTokens", "(", ")", ")", "{", "pages", ".", "add", "(", "tok", ".", "nextToken", "(", ")", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "3869c1643cdc6f7cb8b26097a7b6994683b13d7e", "url": "https://github.com/eclipse/packagedrone/blob/3869c1643cdc6f7cb8b26097a7b6994683b13d7e/bundles/org.apache.jasper.glassfish/src/org/apache/jasper/JspC.java#L837-L842", "partition": "test"}
{"repo": "CloudI/cloudi_api_java", "path": "src/main/java/org/cloudi/API.java", "func_name": "API.mcast_async", "original_string": "public ArrayList<TransId> mcast_async(final String name,\n                                          final byte[] request)\n        throws InvalidInputException,\n               MessageDecodingException,\n               TerminateException\n    {\n        return mcast_async(name, new byte[0], request,\n                           this.timeout_async, this.priority_default);\n    }", "language": "java", "code": "public ArrayList<TransId> mcast_async(final String name,\n                                          final byte[] request)\n        throws InvalidInputException,\n               MessageDecodingException,\n               TerminateException\n    {\n        return mcast_async(name, new byte[0], request,\n                           this.timeout_async, this.priority_default);\n    }", "code_tokens": ["public", "ArrayList", "<", "TransId", ">", "mcast_async", "(", "final", "String", "name", ",", "final", "byte", "[", "]", "request", ")", "throws", "InvalidInputException", ",", "MessageDecodingException", ",", "TerminateException", "{", "return", "mcast_async", "(", "name", ",", "new", "byte", "[", "0", "]", ",", "request", ",", "this", ".", "timeout_async", ",", "this", ".", "priority_default", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "e8ccaeb9ad562c82d742dc31a5f06bcb1b637446", "url": "https://github.com/CloudI/cloudi_api_java/blob/e8ccaeb9ad562c82d742dc31a5f06bcb1b637446/src/main/java/org/cloudi/API.java#L490-L498", "partition": "test"}
{"repo": "Azure/azure-storage-android", "path": "microsoft-azure-storage/src/com/microsoft/azure/storage/CloudStorageAccount.java", "func_name": "CloudStorageAccount.generateSharedAccessSignature", "original_string": "public String generateSharedAccessSignature(SharedAccessAccountPolicy policy)\n            throws InvalidKeyException, StorageException {\n        if (!StorageCredentialsHelper.canCredentialsSignRequest(this.getCredentials())) {\n            throw new IllegalArgumentException(SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);\n        }\n        \n        final String sig = SharedAccessSignatureHelper.generateSharedAccessSignatureHashForAccount(\n                this.credentials.getAccountName(), policy, this.getCredentials());\n        final UriQueryBuilder sasBuilder =\n                SharedAccessSignatureHelper.generateSharedAccessSignatureForAccount(policy, sig);\n        return sasBuilder.toString();\n    }", "language": "java", "code": "public String generateSharedAccessSignature(SharedAccessAccountPolicy policy)\n            throws InvalidKeyException, StorageException {\n        if (!StorageCredentialsHelper.canCredentialsSignRequest(this.getCredentials())) {\n            throw new IllegalArgumentException(SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);\n        }\n        \n        final String sig = SharedAccessSignatureHelper.generateSharedAccessSignatureHashForAccount(\n                this.credentials.getAccountName(), policy, this.getCredentials());\n        final UriQueryBuilder sasBuilder =\n                SharedAccessSignatureHelper.generateSharedAccessSignatureForAccount(policy, sig);\n        return sasBuilder.toString();\n    }", "code_tokens": ["public", "String", "generateSharedAccessSignature", "(", "SharedAccessAccountPolicy", "policy", ")", "throws", "InvalidKeyException", ",", "StorageException", "{", "if", "(", "!", "StorageCredentialsHelper", ".", "canCredentialsSignRequest", "(", "this", ".", "getCredentials", "(", ")", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "SR", ".", "CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY", ")", ";", "}", "final", "String", "sig", "=", "SharedAccessSignatureHelper", ".", "generateSharedAccessSignatureHashForAccount", "(", "this", ".", "credentials", ".", "getAccountName", "(", ")", ",", "policy", ",", "this", ".", "getCredentials", "(", ")", ")", ";", "final", "UriQueryBuilder", "sasBuilder", "=", "SharedAccessSignatureHelper", ".", "generateSharedAccessSignatureForAccount", "(", "policy", ",", "sig", ")", ";", "return", "sasBuilder", ".", "toString", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "2c643c37c6b8c9081058add284c601a2393afc93", "url": "https://github.com/Azure/azure-storage-android/blob/2c643c37c6b8c9081058add284c601a2393afc93/microsoft-azure-storage/src/com/microsoft/azure/storage/CloudStorageAccount.java#L1247-L1258", "partition": "valid"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java", "func_name": "ComponentDescription.addDependency", "original_string": "public void addDependency(ServiceName serviceName) {\n        if (serviceName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"serviceName\", \"component\", componentName);\n        }\n        dependencies.add(serviceName);\n    }", "language": "java", "code": "public void addDependency(ServiceName serviceName) {\n        if (serviceName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"serviceName\", \"component\", componentName);\n        }\n        dependencies.add(serviceName);\n    }", "code_tokens": ["public", "void", "addDependency", "(", "ServiceName", "serviceName", ")", "{", "if", "(", "serviceName", "==", "null", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"serviceName\"", ",", "\"component\"", ",", "componentName", ")", ";", "}", "dependencies", ".", "add", "(", "serviceName", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java#L433-L438", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java", "func_name": "OCommandExecutorSQLSelect.reportTip", "original_string": "protected void reportTip(final String iMessage) {\r\n    Orient.instance().getProfiler().reportTip(iMessage);\r\n    List<String> tips = (List<String>) context.getVariable(\"tips\");\r\n    if (tips == null) {\r\n      tips = new ArrayList<String>(3);\r\n      context.setVariable(\"tips\", tips);\r\n    }\r\n    tips.add(iMessage);\r\n  }", "language": "java", "code": "protected void reportTip(final String iMessage) {\r\n    Orient.instance().getProfiler().reportTip(iMessage);\r\n    List<String> tips = (List<String>) context.getVariable(\"tips\");\r\n    if (tips == null) {\r\n      tips = new ArrayList<String>(3);\r\n      context.setVariable(\"tips\", tips);\r\n    }\r\n    tips.add(iMessage);\r\n  }", "code_tokens": ["protected", "void", "reportTip", "(", "final", "String", "iMessage", ")", "{", "Orient", ".", "instance", "(", ")", ".", "getProfiler", "(", ")", ".", "reportTip", "(", "iMessage", ")", ";", "List", "<", "String", ">", "tips", "=", "(", "List", "<", "String", ">", ")", "context", ".", "getVariable", "(", "\"tips\"", ")", ";", "if", "(", "tips", "==", "null", ")", "{", "tips", "=", "new", "ArrayList", "<", "String", ">", "(", "3", ")", ";", "context", ".", "setVariable", "(", "\"tips\"", ",", "tips", ")", ";", "}", "tips", ".", "add", "(", "iMessage", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java#L853-L861", "partition": "test"}
{"repo": "artclarke/humble-video", "path": "humble-video-noarch/src/main/java/io/humble/video/Encoder.java", "func_name": "Encoder.encode", "original_string": "public void encode(MediaPacket output, MediaSampled media) {\n    VideoJNI.Encoder_encode(swigCPtr, this, MediaPacket.getCPtr(output), output, MediaSampled.getCPtr(media), media);\n  }", "language": "java", "code": "public void encode(MediaPacket output, MediaSampled media) {\n    VideoJNI.Encoder_encode(swigCPtr, this, MediaPacket.getCPtr(output), output, MediaSampled.getCPtr(media), media);\n  }", "code_tokens": ["public", "void", "encode", "(", "MediaPacket", "output", ",", "MediaSampled", "media", ")", "{", "VideoJNI", ".", "Encoder_encode", "(", "swigCPtr", ",", "this", ",", "MediaPacket", ".", "getCPtr", "(", "output", ")", ",", "output", ",", "MediaSampled", ".", "getCPtr", "(", "media", ")", ",", "media", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "aa349ae2d7ef74160b7074feac8d298cf90394d1", "url": "https://github.com/artclarke/humble-video/blob/aa349ae2d7ef74160b7074feac8d298cf90394d1/humble-video-noarch/src/main/java/io/humble/video/Encoder.java#L247-L249", "partition": "test"}
{"repo": "Koekiebox-PTY-LTD/Fluid", "path": "fluid-api/src/main/java/com/fluidbpm/program/api/util/ABaseUtil.java", "func_name": "ABaseUtil.getIntPropertyFromProperties", "original_string": "protected static int getIntPropertyFromProperties(\n\t\t\tProperties propertiesParam,\n\t\t\tString propertyKeyParam\n\t) {\n\t\tString strProp = getStringPropertyFromProperties(\n\t\t\t\tpropertiesParam, propertyKeyParam);\n\n\t\tif(strProp == null || strProp.trim().isEmpty()) {\n\t\t\treturn -1;\n\t\t}\n\n\t\ttry {\n\t\t\treturn Integer.parseInt(strProp);\n\t\t} catch(NumberFormatException nfe) {\n\t\t\treturn -1;\n\t\t}\n\t}", "language": "java", "code": "protected static int getIntPropertyFromProperties(\n\t\t\tProperties propertiesParam,\n\t\t\tString propertyKeyParam\n\t) {\n\t\tString strProp = getStringPropertyFromProperties(\n\t\t\t\tpropertiesParam, propertyKeyParam);\n\n\t\tif(strProp == null || strProp.trim().isEmpty()) {\n\t\t\treturn -1;\n\t\t}\n\n\t\ttry {\n\t\t\treturn Integer.parseInt(strProp);\n\t\t} catch(NumberFormatException nfe) {\n\t\t\treturn -1;\n\t\t}\n\t}", "code_tokens": ["protected", "static", "int", "getIntPropertyFromProperties", "(", "Properties", "propertiesParam", ",", "String", "propertyKeyParam", ")", "{", "String", "strProp", "=", "getStringPropertyFromProperties", "(", "propertiesParam", ",", "propertyKeyParam", ")", ";", "if", "(", "strProp", "==", "null", "||", "strProp", ".", "trim", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "return", "-", "1", ";", "}", "try", "{", "return", "Integer", ".", "parseInt", "(", "strProp", ")", ";", "}", "catch", "(", "NumberFormatException", "nfe", ")", "{", "return", "-", "1", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "81153d865f71b84ca933532c7115717bc3979270", "url": "https://github.com/Koekiebox-PTY-LTD/Fluid/blob/81153d865f71b84ca933532c7115717bc3979270/fluid-api/src/main/java/com/fluidbpm/program/api/util/ABaseUtil.java#L89-L105", "partition": "test"}
{"repo": "eiichiro/bootleg", "path": "src/main/java/org/eiichiro/bootleg/Pipeline.java", "func_name": "Pipeline.set", "original_string": "public Pipeline<T> set(int index, String name, Function<T, T> function) {\n\t\tPreconditions.checkArgument(function != null, \n\t\t\t\t\"Parameter 'function' must not be [\" + function + \"]\");\n\t\tstages.add(index, function);\n\t\tnames.put(function, name);\n\t\treturn this;\n\t}", "language": "java", "code": "public Pipeline<T> set(int index, String name, Function<T, T> function) {\n\t\tPreconditions.checkArgument(function != null, \n\t\t\t\t\"Parameter 'function' must not be [\" + function + \"]\");\n\t\tstages.add(index, function);\n\t\tnames.put(function, name);\n\t\treturn this;\n\t}", "code_tokens": ["public", "Pipeline", "<", "T", ">", "set", "(", "int", "index", ",", "String", "name", ",", "Function", "<", "T", ",", "T", ">", "function", ")", "{", "Preconditions", ".", "checkArgument", "(", "function", "!=", "null", ",", "\"Parameter 'function' must not be [\"", "+", "function", "+", "\"]\"", ")", ";", "stages", ".", "add", "(", "index", ",", "function", ")", ";", "names", ".", "put", "(", "function", ",", "name", ")", ";", "return", "this", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "b98a108500597cb6185056be2eef7de5ba1963d2", "url": "https://github.com/eiichiro/bootleg/blob/b98a108500597cb6185056be2eef7de5ba1963d2/src/main/java/org/eiichiro/bootleg/Pipeline.java#L126-L132", "partition": "test"}
{"repo": "hawkular/hawkular-metrics", "path": "containers/hawkular-openshift-security-filter/src/main/java/org/hawkular/openshift/auth/org/hawkular/openshift/namespace/NamespaceListener.java", "func_name": "NamespaceListener.getNamespaceId", "original_string": "public String getNamespaceId(String namespaceName) {\n        return namespaces.computeIfAbsent(namespaceName, n -> getProjectId(namespaceName, token));\n    }", "language": "java", "code": "public String getNamespaceId(String namespaceName) {\n        return namespaces.computeIfAbsent(namespaceName, n -> getProjectId(namespaceName, token));\n    }", "code_tokens": ["public", "String", "getNamespaceId", "(", "String", "namespaceName", ")", "{", "return", "namespaces", ".", "computeIfAbsent", "(", "namespaceName", ",", "n", "->", "getProjectId", "(", "namespaceName", ",", "token", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "6b9ab00d00c3d6d51e30c2c08c4ee48da7237e6c", "url": "https://github.com/hawkular/hawkular-metrics/blob/6b9ab00d00c3d6d51e30c2c08c4ee48da7237e6c/containers/hawkular-openshift-security-filter/src/main/java/org/hawkular/openshift/auth/org/hawkular/openshift/namespace/NamespaceListener.java#L73-L75", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/JdrReportService.java", "func_name": "JdrReportService.collect", "original_string": "public JdrReport collect() throws OperationFailedException {\n        JdrRunner runner = new JdrRunner(true);\n        serverEnvironment = serverEnvironmentValue.getValue();\n        runner.setJbossHomeDir(serverEnvironment.getHomeDir().getAbsolutePath());\n        runner.setReportLocationDir(serverEnvironment.getServerTempDir().getAbsolutePath());\n        runner.setControllerClient(controllerClient);\n        runner.setHostControllerName(serverEnvironment.getHostControllerName());\n        runner.setServerName(serverEnvironment.getServerName());\n        return runner.collect();\n    }", "language": "java", "code": "public JdrReport collect() throws OperationFailedException {\n        JdrRunner runner = new JdrRunner(true);\n        serverEnvironment = serverEnvironmentValue.getValue();\n        runner.setJbossHomeDir(serverEnvironment.getHomeDir().getAbsolutePath());\n        runner.setReportLocationDir(serverEnvironment.getServerTempDir().getAbsolutePath());\n        runner.setControllerClient(controllerClient);\n        runner.setHostControllerName(serverEnvironment.getHostControllerName());\n        runner.setServerName(serverEnvironment.getServerName());\n        return runner.collect();\n    }", "code_tokens": ["public", "JdrReport", "collect", "(", ")", "throws", "OperationFailedException", "{", "JdrRunner", "runner", "=", "new", "JdrRunner", "(", "true", ")", ";", "serverEnvironment", "=", "serverEnvironmentValue", ".", "getValue", "(", ")", ";", "runner", ".", "setJbossHomeDir", "(", "serverEnvironment", ".", "getHomeDir", "(", ")", ".", "getAbsolutePath", "(", ")", ")", ";", "runner", ".", "setReportLocationDir", "(", "serverEnvironment", ".", "getServerTempDir", "(", ")", ".", "getAbsolutePath", "(", ")", ")", ";", "runner", ".", "setControllerClient", "(", "controllerClient", ")", ";", "runner", ".", "setHostControllerName", "(", "serverEnvironment", ".", "getHostControllerName", "(", ")", ")", ";", "runner", ".", "setServerName", "(", "serverEnvironment", ".", "getServerName", "(", ")", ")", ";", "return", "runner", ".", "collect", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/JdrReportService.java#L87-L96", "partition": "test"}
{"repo": "PistoiaHELM/HELMNotationParser", "path": "src/main/java/org/helm/notation2/parser/StateMachineParser.java", "func_name": "StateMachineParser.isPeptideOrRna", "original_string": "public boolean isPeptideOrRna() throws SimplePolymerSectionException {\r\n    if (polymerElements.size() >= 1) {\r\n      if (polymerElements.get(polymerElements.size() - 1).matches(\"(PEPTIDE[1-9][0-9]*+|RNA[1-9][0-9]*)\")) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } else {\r\n      throw new SimplePolymerSectionException(\"No Polymer Id is found\");\r\n    }\r\n  }", "language": "java", "code": "public boolean isPeptideOrRna() throws SimplePolymerSectionException {\r\n    if (polymerElements.size() >= 1) {\r\n      if (polymerElements.get(polymerElements.size() - 1).matches(\"(PEPTIDE[1-9][0-9]*+|RNA[1-9][0-9]*)\")) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } else {\r\n      throw new SimplePolymerSectionException(\"No Polymer Id is found\");\r\n    }\r\n  }", "code_tokens": ["public", "boolean", "isPeptideOrRna", "(", ")", "throws", "SimplePolymerSectionException", "{", "if", "(", "polymerElements", ".", "size", "(", ")", ">=", "1", ")", "{", "if", "(", "polymerElements", ".", "get", "(", "polymerElements", ".", "size", "(", ")", "-", "1", ")", ".", "matches", "(", "\"(PEPTIDE[1-9][0-9]*+|RNA[1-9][0-9]*)\"", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}", "else", "{", "throw", "new", "SimplePolymerSectionException", "(", "\"No Polymer Id is found\"", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "685d7ab7886e9b5cc15fb904025fe6eee703f8f6", "url": "https://github.com/PistoiaHELM/HELMNotationParser/blob/685d7ab7886e9b5cc15fb904025fe6eee703f8f6/src/main/java/org/helm/notation2/parser/StateMachineParser.java#L256-L265", "partition": "test"}
{"repo": "apache/parquet-mr", "path": "parquet-thrift/src/main/java/org/apache/parquet/thrift/BufferedProtocolReadToWrite.java", "func_name": "BufferedProtocolReadToWrite.readOne", "original_string": "@Override\n  public void readOne(TProtocol in, TProtocol out) throws TException {\n    List<Action> buffer = new LinkedList<Action>();\n    try{\n        boolean hasFieldsIgnored = readOneStruct(in, buffer, thriftType);\n        if (hasFieldsIgnored) {\n          notifyRecordHasFieldIgnored();\n        }\n    } catch (Exception e) {\n      throw new SkippableException(error(\"Error while reading\", buffer), e);\n    }\n\n    try {\n      for (Action a : buffer) {\n        a.write(out);\n      }\n    } catch (Exception e) {\n      throw new TException(error(\"Can not write record\", buffer), e);\n    }\n  }", "language": "java", "code": "@Override\n  public void readOne(TProtocol in, TProtocol out) throws TException {\n    List<Action> buffer = new LinkedList<Action>();\n    try{\n        boolean hasFieldsIgnored = readOneStruct(in, buffer, thriftType);\n        if (hasFieldsIgnored) {\n          notifyRecordHasFieldIgnored();\n        }\n    } catch (Exception e) {\n      throw new SkippableException(error(\"Error while reading\", buffer), e);\n    }\n\n    try {\n      for (Action a : buffer) {\n        a.write(out);\n      }\n    } catch (Exception e) {\n      throw new TException(error(\"Can not write record\", buffer), e);\n    }\n  }", "code_tokens": ["@", "Override", "public", "void", "readOne", "(", "TProtocol", "in", ",", "TProtocol", "out", ")", "throws", "TException", "{", "List", "<", "Action", ">", "buffer", "=", "new", "LinkedList", "<", "Action", ">", "(", ")", ";", "try", "{", "boolean", "hasFieldsIgnored", "=", "readOneStruct", "(", "in", ",", "buffer", ",", "thriftType", ")", ";", "if", "(", "hasFieldsIgnored", ")", "{", "notifyRecordHasFieldIgnored", "(", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "SkippableException", "(", "error", "(", "\"Error while reading\"", ",", "buffer", ")", ",", "e", ")", ";", "}", "try", "{", "for", "(", "Action", "a", ":", "buffer", ")", "{", "a", ".", "write", "(", "out", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "TException", "(", "error", "(", "\"Can not write record\"", ",", "buffer", ")", ",", "e", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "62dcc68acaf64012bf731e103be780956f1f446d", "url": "https://github.com/apache/parquet-mr/blob/62dcc68acaf64012bf731e103be780956f1f446d/parquet-thrift/src/main/java/org/apache/parquet/thrift/BufferedProtocolReadToWrite.java#L141-L160", "partition": "test"}
{"repo": "Unidata/thredds", "path": "dap4/d4servlet/src/main/java/dap4/servlet/Generator.java", "func_name": "Generator.generate", "original_string": "public void\n    generate(CEConstraint ce, ChunkWriter cw, boolean withdmr, ChecksumMode mode)\n            throws DapException\n    {\n        begin(ce, cw, withdmr, mode);\n        if(this.withdmr)\n            generateDMR(this.dmr);\n        dataset(this.dmr);\n        end();\n    }", "language": "java", "code": "public void\n    generate(CEConstraint ce, ChunkWriter cw, boolean withdmr, ChecksumMode mode)\n            throws DapException\n    {\n        begin(ce, cw, withdmr, mode);\n        if(this.withdmr)\n            generateDMR(this.dmr);\n        dataset(this.dmr);\n        end();\n    }", "code_tokens": ["public", "void", "generate", "(", "CEConstraint", "ce", ",", "ChunkWriter", "cw", ",", "boolean", "withdmr", ",", "ChecksumMode", "mode", ")", "throws", "DapException", "{", "begin", "(", "ce", ",", "cw", ",", "withdmr", ",", "mode", ")", ";", "if", "(", "this", ".", "withdmr", ")", "generateDMR", "(", "this", ".", "dmr", ")", ";", "dataset", "(", "this", ".", "dmr", ")", ";", "end", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/dap4/d4servlet/src/main/java/dap4/servlet/Generator.java#L120-L129", "partition": "test"}
{"repo": "boonproject/boon", "path": "boon/src/main/java/org/boon/core/reflection/BeanUtils.java", "func_name": "BeanUtils.getFieldsFromObject", "original_string": "public static Map<String, FieldAccess> getFieldsFromObject( Object object ) {\n\n        try {\n           Map<String, FieldAccess> fields;\n\n            if ( object instanceof Map ) {\n\n                fields = getFieldsFromMap( ( Map<String, Object> ) object );\n            } else {\n                fields = getPropertyFieldAccessMap( object.getClass() );\n\n            }\n\n\n           return fields;\n        } catch (Exception ex) {\n           requireNonNull(object, \"Item cannot be null\" );\n           return handle(Map.class, ex, \"Unable to get fields from object\", className(object));\n        }\n\n    }", "language": "java", "code": "public static Map<String, FieldAccess> getFieldsFromObject( Object object ) {\n\n        try {\n           Map<String, FieldAccess> fields;\n\n            if ( object instanceof Map ) {\n\n                fields = getFieldsFromMap( ( Map<String, Object> ) object );\n            } else {\n                fields = getPropertyFieldAccessMap( object.getClass() );\n\n            }\n\n\n           return fields;\n        } catch (Exception ex) {\n           requireNonNull(object, \"Item cannot be null\" );\n           return handle(Map.class, ex, \"Unable to get fields from object\", className(object));\n        }\n\n    }", "code_tokens": ["public", "static", "Map", "<", "String", ",", "FieldAccess", ">", "getFieldsFromObject", "(", "Object", "object", ")", "{", "try", "{", "Map", "<", "String", ",", "FieldAccess", ">", "fields", ";", "if", "(", "object", "instanceof", "Map", ")", "{", "fields", "=", "getFieldsFromMap", "(", "(", "Map", "<", "String", ",", "Object", ">", ")", "object", ")", ";", "}", "else", "{", "fields", "=", "getPropertyFieldAccessMap", "(", "object", ".", "getClass", "(", ")", ")", ";", "}", "return", "fields", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "requireNonNull", "(", "object", ",", "\"Item cannot be null\"", ")", ";", "return", "handle", "(", "Map", ".", "class", ",", "ex", ",", "\"Unable to get fields from object\"", ",", "className", "(", "object", ")", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "9bc6870dbe5dd58c45c18d8edb493e8efc089463", "url": "https://github.com/boonproject/boon/blob/9bc6870dbe5dd58c45c18d8edb493e8efc089463/boon/src/main/java/org/boon/core/reflection/BeanUtils.java#L128-L148", "partition": "test"}
{"repo": "blademainer/common_utils", "path": "commons-file/src/main/java/info/monitorenter/cpdetector/util/collections/ui/StreamTableRenderer.java", "func_name": "StreamTableRenderer.render", "original_string": "public final void render(TableModel model) throws IOException {\n    this.m_out.write(this.TableStartTag());\n    int rows = model.getRowCount();\n    // write header\n    m_out.write(this.HeadRowStartTag());\n    this.renderHeader(model);\n    m_out.write(this.HeadRowStopTag());\n\n    for(int i=0;i<rows;i++){\n      this.renderRow(model,i);\n    }\n    this.m_out.write(this.TableStopTag());\n  }", "language": "java", "code": "public final void render(TableModel model) throws IOException {\n    this.m_out.write(this.TableStartTag());\n    int rows = model.getRowCount();\n    // write header\n    m_out.write(this.HeadRowStartTag());\n    this.renderHeader(model);\n    m_out.write(this.HeadRowStopTag());\n\n    for(int i=0;i<rows;i++){\n      this.renderRow(model,i);\n    }\n    this.m_out.write(this.TableStopTag());\n  }", "code_tokens": ["public", "final", "void", "render", "(", "TableModel", "model", ")", "throws", "IOException", "{", "this", ".", "m_out", ".", "write", "(", "this", ".", "TableStartTag", "(", ")", ")", ";", "int", "rows", "=", "model", ".", "getRowCount", "(", ")", ";", "// write header", "m_out", ".", "write", "(", "this", ".", "HeadRowStartTag", "(", ")", ")", ";", "this", ".", "renderHeader", "(", "model", ")", ";", "m_out", ".", "write", "(", "this", ".", "HeadRowStopTag", "(", ")", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "rows", ";", "i", "++", ")", "{", "this", ".", "renderRow", "(", "model", ",", "i", ")", ";", "}", "this", ".", "m_out", ".", "write", "(", "this", ".", "TableStopTag", "(", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ef6baf0367c16de95a28caab67a7d5842a6d13db", "url": "https://github.com/blademainer/common_utils/blob/ef6baf0367c16de95a28caab67a7d5842a6d13db/commons-file/src/main/java/info/monitorenter/cpdetector/util/collections/ui/StreamTableRenderer.java#L120-L132", "partition": "test"}
{"repo": "ieb/sparsemapcontent", "path": "core/src/main/java/org/sakaiproject/nakamura/api/lite/util/Type1UUID.java", "func_name": "Type1UUID.next", "original_string": "public static byte[] next() {\n        if (type1Initialized == false) {\n            initializeForType1();\n        }\n        // set ip addr\n        byte[] uuid = new byte[16];\n        System.arraycopy(IP, 0, uuid, 10, IP.length);\n\n        // Set time info. Have to do this processing within a synchronized\n        // block because of the statics...\n        long now = 0;\n        synchronized (Type1UUID.class) {\n            // Get the time to use for this uuid. This method has the side\n            // effect of modifying the clock sequence, as well.\n            now = getTime();\n\n            // Insert the resulting clock sequence into the uuid\n            uuid[IDX_TIME_SEQ] = (byte) ((_seq & 0x3F00) >>> 8);\n            uuid[IDX_VARIATION] |= 0x80;\n            uuid[IDX_TIME_SEQ + 1] = (byte) (_seq & 0xFF);\n\n        }\n\n        // have to break up time because bytes are spread through uuid\n        byte[] timeBytes = toBytes(now);\n\n        // Copy time low\n        System.arraycopy(timeBytes, TS_TIME_LO_IDX, uuid, IDX_TIME_LO, TS_TIME_LO_LEN);\n        // Copy time mid\n        System.arraycopy(timeBytes, TS_TIME_MID_IDX, uuid, IDX_TIME_MID, TS_TIME_MID_LEN);\n        // Copy time hi\n        System.arraycopy(timeBytes, TS_TIME_HI_IDX, uuid, IDX_TIME_HI, TS_TIME_HI_LEN);\n        // Set version (time-based)\n        uuid[IDX_TYPE] |= TYPE_TIME_BASED; // 0001 0000\n\n        return uuid;\n    }", "language": "java", "code": "public static byte[] next() {\n        if (type1Initialized == false) {\n            initializeForType1();\n        }\n        // set ip addr\n        byte[] uuid = new byte[16];\n        System.arraycopy(IP, 0, uuid, 10, IP.length);\n\n        // Set time info. Have to do this processing within a synchronized\n        // block because of the statics...\n        long now = 0;\n        synchronized (Type1UUID.class) {\n            // Get the time to use for this uuid. This method has the side\n            // effect of modifying the clock sequence, as well.\n            now = getTime();\n\n            // Insert the resulting clock sequence into the uuid\n            uuid[IDX_TIME_SEQ] = (byte) ((_seq & 0x3F00) >>> 8);\n            uuid[IDX_VARIATION] |= 0x80;\n            uuid[IDX_TIME_SEQ + 1] = (byte) (_seq & 0xFF);\n\n        }\n\n        // have to break up time because bytes are spread through uuid\n        byte[] timeBytes = toBytes(now);\n\n        // Copy time low\n        System.arraycopy(timeBytes, TS_TIME_LO_IDX, uuid, IDX_TIME_LO, TS_TIME_LO_LEN);\n        // Copy time mid\n        System.arraycopy(timeBytes, TS_TIME_MID_IDX, uuid, IDX_TIME_MID, TS_TIME_MID_LEN);\n        // Copy time hi\n        System.arraycopy(timeBytes, TS_TIME_HI_IDX, uuid, IDX_TIME_HI, TS_TIME_HI_LEN);\n        // Set version (time-based)\n        uuid[IDX_TYPE] |= TYPE_TIME_BASED; // 0001 0000\n\n        return uuid;\n    }", "code_tokens": ["public", "static", "byte", "[", "]", "next", "(", ")", "{", "if", "(", "type1Initialized", "==", "false", ")", "{", "initializeForType1", "(", ")", ";", "}", "// set ip addr", "byte", "[", "]", "uuid", "=", "new", "byte", "[", "16", "]", ";", "System", ".", "arraycopy", "(", "IP", ",", "0", ",", "uuid", ",", "10", ",", "IP", ".", "length", ")", ";", "// Set time info. Have to do this processing within a synchronized", "// block because of the statics...", "long", "now", "=", "0", ";", "synchronized", "(", "Type1UUID", ".", "class", ")", "{", "// Get the time to use for this uuid. This method has the side", "// effect of modifying the clock sequence, as well.", "now", "=", "getTime", "(", ")", ";", "// Insert the resulting clock sequence into the uuid", "uuid", "[", "IDX_TIME_SEQ", "]", "=", "(", "byte", ")", "(", "(", "_seq", "&", "0x3F00", ")", ">>>", "8", ")", ";", "uuid", "[", "IDX_VARIATION", "]", "|=", "0x80", ";", "uuid", "[", "IDX_TIME_SEQ", "+", "1", "]", "=", "(", "byte", ")", "(", "_seq", "&", "0xFF", ")", ";", "}", "// have to break up time because bytes are spread through uuid", "byte", "[", "]", "timeBytes", "=", "toBytes", "(", "now", ")", ";", "// Copy time low", "System", ".", "arraycopy", "(", "timeBytes", ",", "TS_TIME_LO_IDX", ",", "uuid", ",", "IDX_TIME_LO", ",", "TS_TIME_LO_LEN", ")", ";", "// Copy time mid", "System", ".", "arraycopy", "(", "timeBytes", ",", "TS_TIME_MID_IDX", ",", "uuid", ",", "IDX_TIME_MID", ",", "TS_TIME_MID_LEN", ")", ";", "// Copy time hi", "System", ".", "arraycopy", "(", "timeBytes", ",", "TS_TIME_HI_IDX", ",", "uuid", ",", "IDX_TIME_HI", ",", "TS_TIME_HI_LEN", ")", ";", "// Set version (time-based)", "uuid", "[", "IDX_TYPE", "]", "|=", "TYPE_TIME_BASED", ";", "// 0001 0000", "return", "uuid", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "0570fdf868adbbf7734790cbc09fe66480e5f2dc", "url": "https://github.com/ieb/sparsemapcontent/blob/0570fdf868adbbf7734790cbc09fe66480e5f2dc/core/src/main/java/org/sakaiproject/nakamura/api/lite/util/Type1UUID.java#L130-L166", "partition": "test"}
{"repo": "ieb/sparsemapcontent", "path": "extensions/resource/src/main/java/uk/co/tfd/sm/util/http/RequestUtils.java", "func_name": "RequestUtils.toValue", "original_string": "public static Object toValue(String name, Object value) {\n\t\tString[] parts = StringUtils.split(name, \"@\", 2);\n\t\tString fieldName = null;\n\t\tString fieldType = \"String\";\n\t\tif (parts.length == 2) {\n\t\t\tfieldType = parts[1];\n\t\t\tfieldName = parts[0];\n\t\t} else if (parts.length == 1) {\n\t\t\tfieldName = parts[0];\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid property name\");\n\t\t}\n\t\ttry {\n\t\t\tint l = Array.getLength(value);\n\t\t\tRequestParameterType<?> rpt = TYPES.get(fieldType);\n\t\t\tif (rpt == null) {\n\t\t\t\trpt = TYPES.get(RequestParameterType.STRING);\n\t\t\t}\n\t\t\tif (!fieldName.endsWith(\"[]\") && l == 1) {\n\t\t\t\treturn rpt.newInstance(Array.get(value, 0));\n\t\t\t}\n\t\t\tClass<?> componentType = rpt.getComponentType();\n\t\t\tObject[] a = (Object[]) Array.newInstance(componentType, l);\n\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\ta[i] = rpt.newInstance(Array.get(value, i));\n\t\t\t}\n\t\t\treturn a;\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tRequestParameterType<?> rpt = TYPES.get(fieldType);\n\t\t\tif (rpt == null) {\n\t\t\t\trpt = TYPES.get(RequestParameterType.STRING);\n\t\t\t}\n\t\t\treturn rpt.newInstance(value);\n\t\t}\n\t}", "language": "java", "code": "public static Object toValue(String name, Object value) {\n\t\tString[] parts = StringUtils.split(name, \"@\", 2);\n\t\tString fieldName = null;\n\t\tString fieldType = \"String\";\n\t\tif (parts.length == 2) {\n\t\t\tfieldType = parts[1];\n\t\t\tfieldName = parts[0];\n\t\t} else if (parts.length == 1) {\n\t\t\tfieldName = parts[0];\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid property name\");\n\t\t}\n\t\ttry {\n\t\t\tint l = Array.getLength(value);\n\t\t\tRequestParameterType<?> rpt = TYPES.get(fieldType);\n\t\t\tif (rpt == null) {\n\t\t\t\trpt = TYPES.get(RequestParameterType.STRING);\n\t\t\t}\n\t\t\tif (!fieldName.endsWith(\"[]\") && l == 1) {\n\t\t\t\treturn rpt.newInstance(Array.get(value, 0));\n\t\t\t}\n\t\t\tClass<?> componentType = rpt.getComponentType();\n\t\t\tObject[] a = (Object[]) Array.newInstance(componentType, l);\n\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\ta[i] = rpt.newInstance(Array.get(value, i));\n\t\t\t}\n\t\t\treturn a;\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tRequestParameterType<?> rpt = TYPES.get(fieldType);\n\t\t\tif (rpt == null) {\n\t\t\t\trpt = TYPES.get(RequestParameterType.STRING);\n\t\t\t}\n\t\t\treturn rpt.newInstance(value);\n\t\t}\n\t}", "code_tokens": ["public", "static", "Object", "toValue", "(", "String", "name", ",", "Object", "value", ")", "{", "String", "[", "]", "parts", "=", "StringUtils", ".", "split", "(", "name", ",", "\"@\"", ",", "2", ")", ";", "String", "fieldName", "=", "null", ";", "String", "fieldType", "=", "\"String\"", ";", "if", "(", "parts", ".", "length", "==", "2", ")", "{", "fieldType", "=", "parts", "[", "1", "]", ";", "fieldName", "=", "parts", "[", "0", "]", ";", "}", "else", "if", "(", "parts", ".", "length", "==", "1", ")", "{", "fieldName", "=", "parts", "[", "0", "]", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "\"Invalid property name\"", ")", ";", "}", "try", "{", "int", "l", "=", "Array", ".", "getLength", "(", "value", ")", ";", "RequestParameterType", "<", "?", ">", "rpt", "=", "TYPES", ".", "get", "(", "fieldType", ")", ";", "if", "(", "rpt", "==", "null", ")", "{", "rpt", "=", "TYPES", ".", "get", "(", "RequestParameterType", ".", "STRING", ")", ";", "}", "if", "(", "!", "fieldName", ".", "endsWith", "(", "\"[]\"", ")", "&&", "l", "==", "1", ")", "{", "return", "rpt", ".", "newInstance", "(", "Array", ".", "get", "(", "value", ",", "0", ")", ")", ";", "}", "Class", "<", "?", ">", "componentType", "=", "rpt", ".", "getComponentType", "(", ")", ";", "Object", "[", "]", "a", "=", "(", "Object", "[", "]", ")", "Array", ".", "newInstance", "(", "componentType", ",", "l", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l", ";", "i", "++", ")", "{", "a", "[", "i", "]", "=", "rpt", ".", "newInstance", "(", "Array", ".", "get", "(", "value", ",", "i", ")", ")", ";", "}", "return", "a", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "RequestParameterType", "<", "?", ">", "rpt", "=", "TYPES", ".", "get", "(", "fieldType", ")", ";", "if", "(", "rpt", "==", "null", ")", "{", "rpt", "=", "TYPES", ".", "get", "(", "RequestParameterType", ".", "STRING", ")", ";", "}", "return", "rpt", ".", "newInstance", "(", "value", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "0570fdf868adbbf7734790cbc09fe66480e5f2dc", "url": "https://github.com/ieb/sparsemapcontent/blob/0570fdf868adbbf7734790cbc09fe66480e5f2dc/extensions/resource/src/main/java/uk/co/tfd/sm/util/http/RequestUtils.java#L84-L118", "partition": "test"}
{"repo": "kiegroup/droolsjbpm-tools", "path": "drools-eclipse/org.drools.eclipse/src/main/java/org/drools/eclipse/dsl/editor/completion/DSLRuleCompletionProcessor.java", "func_name": "DSLRuleCompletionProcessor.getProposals", "original_string": "protected List<String> getProposals(DSLAdapter adapter, String obj, String last, boolean firstLine) {\n        if (last.length() == 0) {\n            last = \" \";\n        }\n        return adapter.getDSLTree().getChildrenList(obj, last, true, firstLine);\n    }", "language": "java", "code": "protected List<String> getProposals(DSLAdapter adapter, String obj, String last, boolean firstLine) {\n        if (last.length() == 0) {\n            last = \" \";\n        }\n        return adapter.getDSLTree().getChildrenList(obj, last, true, firstLine);\n    }", "code_tokens": ["protected", "List", "<", "String", ">", "getProposals", "(", "DSLAdapter", "adapter", ",", "String", "obj", ",", "String", "last", ",", "boolean", "firstLine", ")", "{", "if", "(", "last", ".", "length", "(", ")", "==", "0", ")", "{", "last", "=", "\" \"", ";", "}", "return", "adapter", ".", "getDSLTree", "(", ")", ".", "getChildrenList", "(", "obj", ",", "last", ",", "true", ",", "firstLine", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "05e1f73c591178360a198dca29f99d73918991db", "url": "https://github.com/kiegroup/droolsjbpm-tools/blob/05e1f73c591178360a198dca29f99d73918991db/drools-eclipse/org.drools.eclipse/src/main/java/org/drools/eclipse/dsl/editor/completion/DSLRuleCompletionProcessor.java#L176-L181", "partition": "test"}
{"repo": "robolectric/robolectric", "path": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowUserManager.java", "func_name": "ShadowUserManager.switchUser", "original_string": "public void switchUser(int userId) {\n    if (!userInfoMap.containsKey(userId)) {\n      throw new UnsupportedOperationException(\"Must add user before switching to it\");\n    }\n\n    ShadowProcess.setUid(userPidMap.get(userId));\n  }", "language": "java", "code": "public void switchUser(int userId) {\n    if (!userInfoMap.containsKey(userId)) {\n      throw new UnsupportedOperationException(\"Must add user before switching to it\");\n    }\n\n    ShadowProcess.setUid(userPidMap.get(userId));\n  }", "code_tokens": ["public", "void", "switchUser", "(", "int", "userId", ")", "{", "if", "(", "!", "userInfoMap", ".", "containsKey", "(", "userId", ")", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"Must add user before switching to it\"", ")", ";", "}", "ShadowProcess", ".", "setUid", "(", "userPidMap", ".", "get", "(", "userId", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "4fa79a2c72f8abbf742ab920419653c207b41d62", "url": "https://github.com/robolectric/robolectric/blob/4fa79a2c72f8abbf742ab920419653c207b41d62/shadows/framework/src/main/java/org/robolectric/shadows/ShadowUserManager.java#L514-L520", "partition": "valid"}
{"repo": "rockagen/commons-lib", "path": "src/main/java/com/rockagen/commons/util/JsonUtil.java", "func_name": "JsonUtil.toBean", "original_string": "public static <T> T toBean(Reader jsonReader, TypeReference<T> valueTypeRef) {\n\t\tif (valueTypeRef == null || jsonReader == null)\n\t\t\treturn null;\n\t\treturn toBean(new MyJsonParser(jsonReader), valueTypeRef);\n\n\t}", "language": "java", "code": "public static <T> T toBean(Reader jsonReader, TypeReference<T> valueTypeRef) {\n\t\tif (valueTypeRef == null || jsonReader == null)\n\t\t\treturn null;\n\t\treturn toBean(new MyJsonParser(jsonReader), valueTypeRef);\n\n\t}", "code_tokens": ["public", "static", "<", "T", ">", "T", "toBean", "(", "Reader", "jsonReader", ",", "TypeReference", "<", "T", ">", "valueTypeRef", ")", "{", "if", "(", "valueTypeRef", "==", "null", "||", "jsonReader", "==", "null", ")", "return", "null", ";", "return", "toBean", "(", "new", "MyJsonParser", "(", "jsonReader", ")", ",", "valueTypeRef", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "f37141cf40be79d130db804c39ce61690541d5f1", "url": "https://github.com/rockagen/commons-lib/blob/f37141cf40be79d130db804c39ce61690541d5f1/src/main/java/com/rockagen/commons/util/JsonUtil.java#L237-L242", "partition": "test"}
{"repo": "wro4j/wro4j", "path": "wro4j-extensions/src/main/java/ro/isdc/wro/extensions/processor/js/JsonHPackProcessor.java", "func_name": "JsonHPackProcessor.process", "original_string": "@Override\n  public void process(final Resource resource, final Reader reader, final Writer writer)\n      throws IOException {\n    final String content = IOUtils.toString(reader);\n    try {\n      writer.write(doProcess(content));\n    } catch (final WroRuntimeException e) {\n      onException(e);\n      final String resourceUri = resource == null ? StringUtils.EMPTY : \"[\" + resource.getUri() + \"]\";\n      LOG.warn(\"Exception while applying hpack processor on the \" + resourceUri\n          + \" resource, no processing applied...\", e);\n    } finally {\n      reader.close();\n      writer.close();\n    }\n  }", "language": "java", "code": "@Override\n  public void process(final Resource resource, final Reader reader, final Writer writer)\n      throws IOException {\n    final String content = IOUtils.toString(reader);\n    try {\n      writer.write(doProcess(content));\n    } catch (final WroRuntimeException e) {\n      onException(e);\n      final String resourceUri = resource == null ? StringUtils.EMPTY : \"[\" + resource.getUri() + \"]\";\n      LOG.warn(\"Exception while applying hpack processor on the \" + resourceUri\n          + \" resource, no processing applied...\", e);\n    } finally {\n      reader.close();\n      writer.close();\n    }\n  }", "code_tokens": ["@", "Override", "public", "void", "process", "(", "final", "Resource", "resource", ",", "final", "Reader", "reader", ",", "final", "Writer", "writer", ")", "throws", "IOException", "{", "final", "String", "content", "=", "IOUtils", ".", "toString", "(", "reader", ")", ";", "try", "{", "writer", ".", "write", "(", "doProcess", "(", "content", ")", ")", ";", "}", "catch", "(", "final", "WroRuntimeException", "e", ")", "{", "onException", "(", "e", ")", ";", "final", "String", "resourceUri", "=", "resource", "==", "null", "?", "StringUtils", ".", "EMPTY", ":", "\"[\"", "+", "resource", ".", "getUri", "(", ")", "+", "\"]\"", ";", "LOG", ".", "warn", "(", "\"Exception while applying hpack processor on the \"", "+", "resourceUri", "+", "\" resource, no processing applied...\"", ",", "e", ")", ";", "}", "finally", "{", "reader", ".", "close", "(", ")", ";", "writer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2a3de71ab8bf0af7061fb6327501e08198338df", "url": "https://github.com/wro4j/wro4j/blob/d2a3de71ab8bf0af7061fb6327501e08198338df/wro4j-extensions/src/main/java/ro/isdc/wro/extensions/processor/js/JsonHPackProcessor.java#L73-L88", "partition": "test"}
{"repo": "OpenEstate/OpenEstate-IO", "path": "OpenImmo/src/main/jaxb/org/openestate/io/openimmo/xml/ObjectFactory.java", "func_name": "ObjectFactory.createPreisZeitraumVon", "original_string": "@XmlElementDecl(namespace = \"\", name = \"preis_zeitraum_von\")\n    @XmlJavaTypeAdapter(Adapter4 .class)\n    public JAXBElement<Calendar> createPreisZeitraumVon(Calendar value) {\n        return new JAXBElement<Calendar>(_PreisZeitraumVon_QNAME, Calendar.class, null, value);\n    }", "language": "java", "code": "@XmlElementDecl(namespace = \"\", name = \"preis_zeitraum_von\")\n    @XmlJavaTypeAdapter(Adapter4 .class)\n    public JAXBElement<Calendar> createPreisZeitraumVon(Calendar value) {\n        return new JAXBElement<Calendar>(_PreisZeitraumVon_QNAME, Calendar.class, null, value);\n    }", "code_tokens": ["@", "XmlElementDecl", "(", "namespace", "=", "\"\"", ",", "name", "=", "\"preis_zeitraum_von\"", ")", "@", "XmlJavaTypeAdapter", "(", "Adapter4", ".", "class", ")", "public", "JAXBElement", "<", "Calendar", ">", "createPreisZeitraumVon", "(", "Calendar", "value", ")", "{", "return", "new", "JAXBElement", "<", "Calendar", ">", "(", "_PreisZeitraumVon_QNAME", ",", "Calendar", ".", "class", ",", "null", ",", "value", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "f961dae78f40823f05a8c0d4e59d639e718aa18a", "url": "https://github.com/OpenEstate/OpenEstate-IO/blob/f961dae78f40823f05a8c0d4e59d639e718aa18a/OpenImmo/src/main/jaxb/org/openestate/io/openimmo/xml/ObjectFactory.java#L1843-L1847", "partition": "test"}
{"repo": "akquinet/android-marvin", "path": "marvin/src/main/java/de/akquinet/android/marvin/monitor/ExtendedActivityMonitor.java", "func_name": "ExtendedActivityMonitor.getMostRecentlyStartedActivity", "original_string": "public Activity getMostRecentlyStartedActivity() {\n        List<StartedActivity> activities = getStartedActivities();\n\n        if (activities.size() == 0) {\n            return null;\n        }\n\n        return activities.get(activities.size() - 1).getActivity();\n    }", "language": "java", "code": "public Activity getMostRecentlyStartedActivity() {\n        List<StartedActivity> activities = getStartedActivities();\n\n        if (activities.size() == 0) {\n            return null;\n        }\n\n        return activities.get(activities.size() - 1).getActivity();\n    }", "code_tokens": ["public", "Activity", "getMostRecentlyStartedActivity", "(", ")", "{", "List", "<", "StartedActivity", ">", "activities", "=", "getStartedActivities", "(", ")", ";", "if", "(", "activities", ".", "size", "(", ")", "==", "0", ")", "{", "return", "null", ";", "}", "return", "activities", ".", "get", "(", "activities", ".", "size", "(", ")", "-", "1", ")", ".", "getActivity", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "a0dfd0383e5cedd03ddb49382137bf7dd6ca9b85", "url": "https://github.com/akquinet/android-marvin/blob/a0dfd0383e5cedd03ddb49382137bf7dd6ca9b85/marvin/src/main/java/de/akquinet/android/marvin/monitor/ExtendedActivityMonitor.java#L116-L124", "partition": "valid"}
{"repo": "rest-assured/rest-assured", "path": "modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java", "func_name": "RestAssuredMockMvcConfig.mockMvcConfig", "original_string": "public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) {\n        notNull(mockMvcConfig, MockMvcConfig.class);\n        return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig,\n                objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig);\n    }", "language": "java", "code": "public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) {\n        notNull(mockMvcConfig, MockMvcConfig.class);\n        return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig,\n                objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig);\n    }", "code_tokens": ["public", "RestAssuredMockMvcConfig", "mockMvcConfig", "(", "MockMvcConfig", "mockMvcConfig", ")", "{", "notNull", "(", "mockMvcConfig", ",", "MockMvcConfig", ".", "class", ")", ";", "return", "new", "RestAssuredMockMvcConfig", "(", "logConfig", ",", "encoderConfig", ",", "decoderConfig", ",", "sessionConfig", ",", "objectMapperConfig", ",", "jsonConfig", ",", "xmlConfig", ",", "headerConfig", ",", "asyncConfig", ",", "multiPartConfig", ",", "mockMvcConfig", ",", "paramConfig", ",", "matcherConfig", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "165a85b65070f5a07fe0045175613fb2c2811642", "url": "https://github.com/rest-assured/rest-assured/blob/165a85b65070f5a07fe0045175613fb2c2811642/modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java#L215-L219", "partition": "test"}
{"repo": "OpenEstate/OpenEstate-IO", "path": "ImmoXML/src/main/jaxb/org/openestate/io/immoxml/xml/ObjectFactory.java", "func_name": "ObjectFactory.createKaufpreis", "original_string": "@XmlElementDecl(namespace = \"http://www.immoxml.de\", name = \"kaufpreis\")\n    @XmlJavaTypeAdapter(Adapter7 .class)\n    public JAXBElement<BigDecimal> createKaufpreis(BigDecimal value) {\n        return new JAXBElement<BigDecimal>(_Kaufpreis_QNAME, BigDecimal.class, null, value);\n    }", "language": "java", "code": "@XmlElementDecl(namespace = \"http://www.immoxml.de\", name = \"kaufpreis\")\n    @XmlJavaTypeAdapter(Adapter7 .class)\n    public JAXBElement<BigDecimal> createKaufpreis(BigDecimal value) {\n        return new JAXBElement<BigDecimal>(_Kaufpreis_QNAME, BigDecimal.class, null, value);\n    }", "code_tokens": ["@", "XmlElementDecl", "(", "namespace", "=", "\"http://www.immoxml.de\"", ",", "name", "=", "\"kaufpreis\"", ")", "@", "XmlJavaTypeAdapter", "(", "Adapter7", ".", "class", ")", "public", "JAXBElement", "<", "BigDecimal", ">", "createKaufpreis", "(", "BigDecimal", "value", ")", "{", "return", "new", "JAXBElement", "<", "BigDecimal", ">", "(", "_Kaufpreis_QNAME", ",", "BigDecimal", ".", "class", ",", "null", ",", "value", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "f961dae78f40823f05a8c0d4e59d639e718aa18a", "url": "https://github.com/OpenEstate/OpenEstate-IO/blob/f961dae78f40823f05a8c0d4e59d639e718aa18a/ImmoXML/src/main/jaxb/org/openestate/io/immoxml/xml/ObjectFactory.java#L1108-L1112", "partition": "test"}
{"repo": "kocakosm/pitaya", "path": "src/org/kocakosm/pitaya/time/Dates.java", "func_name": "Dates.format", "original_string": "public static String format(Date date, String format)\n\t{\n\t\tParameters.checkNotNull(date);\n\t\treturn new SimpleDateFormat(format).format(date);\n\t}", "language": "java", "code": "public static String format(Date date, String format)\n\t{\n\t\tParameters.checkNotNull(date);\n\t\treturn new SimpleDateFormat(format).format(date);\n\t}", "code_tokens": ["public", "static", "String", "format", "(", "Date", "date", ",", "String", "format", ")", "{", "Parameters", ".", "checkNotNull", "(", "date", ")", ";", "return", "new", "SimpleDateFormat", "(", "format", ")", ".", "format", "(", "date", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "f2b203b6cdb32723bd1249a1325a3bb5918bf99a", "url": "https://github.com/kocakosm/pitaya/blob/f2b203b6cdb32723bd1249a1325a3bb5918bf99a/src/org/kocakosm/pitaya/time/Dates.java#L318-L322", "partition": "test"}
{"repo": "webfirmframework/wff", "path": "wffweb/src/main/java/com/webfirmframework/wffweb/tag/html/model/AbstractHtml5SharedObject.java", "func_name": "AbstractHtml5SharedObject.setPushQueue", "original_string": "public void setPushQueue(final PushQueue pushQueue,\n            final Object accessObject) {\n        if (accessObject == null || !(SecurityClassConstants.BROWSER_PAGE\n                .equals(accessObject.getClass().getName()))) {\n            throw new WffSecurityException(\n                    \"Not allowed to consume this method. This method is for internal use.\");\n        }\n        this.pushQueue = pushQueue;\n    }", "language": "java", "code": "public void setPushQueue(final PushQueue pushQueue,\n            final Object accessObject) {\n        if (accessObject == null || !(SecurityClassConstants.BROWSER_PAGE\n                .equals(accessObject.getClass().getName()))) {\n            throw new WffSecurityException(\n                    \"Not allowed to consume this method. This method is for internal use.\");\n        }\n        this.pushQueue = pushQueue;\n    }", "code_tokens": ["public", "void", "setPushQueue", "(", "final", "PushQueue", "pushQueue", ",", "final", "Object", "accessObject", ")", "{", "if", "(", "accessObject", "==", "null", "||", "!", "(", "SecurityClassConstants", ".", "BROWSER_PAGE", ".", "equals", "(", "accessObject", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ")", ")", "{", "throw", "new", "WffSecurityException", "(", "\"Not allowed to consume this method. This method is for internal use.\"", ")", ";", "}", "this", ".", "pushQueue", "=", "pushQueue", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "e59def3a20d44f91e112b113448d951d7514af2e", "url": "https://github.com/webfirmframework/wff/blob/e59def3a20d44f91e112b113448d951d7514af2e/wffweb/src/main/java/com/webfirmframework/wffweb/tag/html/model/AbstractHtml5SharedObject.java#L642-L650", "partition": "valid"}
{"repo": "jcodec/jcodec", "path": "src/main/java/org/jcodec/codecs/mpeg12/SegmentReader.java", "func_name": "SegmentReader.readToNextMarkerPartial", "original_string": "public final State readToNextMarkerPartial(ByteBuffer out) throws IOException {\n        if (done)\n            return State.STOP;\n        int skipOneMarker = curMarker >= 0x100 && curMarker <= 0x1ff ? 1 : 0;\n        int written = out.position();\n        do {\n            while (buf.hasRemaining()) {\n                if (curMarker >= 0x100 && curMarker <= 0x1ff) {\n                    if (skipOneMarker == 0) {\n                        return State.DONE;\n                    }\n                    --skipOneMarker;\n                }\n                if (!out.hasRemaining())\n                    return State.MORE_DATA;\n                out.put((byte) (curMarker >>> 24));\n                curMarker = (curMarker << 8) | (buf.get() & 0xff);\n            }\n            buf = NIOUtils.fetchFromChannel(channel, fetchSize);\n            pos += buf.remaining();\n        } while (buf.hasRemaining());\n\n        written = out.position() - written;\n        if (written > 0 && curMarker >= 0x100 && curMarker <= 0x1ff)\n            return State.DONE;\n\n        for (; bytesInMarker > 0 && out.hasRemaining();) {\n            out.put((byte) (curMarker >>> 24));\n            curMarker = (curMarker << 8);\n            --bytesInMarker;\n            if (curMarker >= 0x100 && curMarker <= 0x1ff)\n                return State.DONE;\n        }\n\n        if (bytesInMarker == 0) {\n            done = true;\n            return State.STOP;\n        } else {\n            return State.MORE_DATA;\n        }\n    }", "language": "java", "code": "public final State readToNextMarkerPartial(ByteBuffer out) throws IOException {\n        if (done)\n            return State.STOP;\n        int skipOneMarker = curMarker >= 0x100 && curMarker <= 0x1ff ? 1 : 0;\n        int written = out.position();\n        do {\n            while (buf.hasRemaining()) {\n                if (curMarker >= 0x100 && curMarker <= 0x1ff) {\n                    if (skipOneMarker == 0) {\n                        return State.DONE;\n                    }\n                    --skipOneMarker;\n                }\n                if (!out.hasRemaining())\n                    return State.MORE_DATA;\n                out.put((byte) (curMarker >>> 24));\n                curMarker = (curMarker << 8) | (buf.get() & 0xff);\n            }\n            buf = NIOUtils.fetchFromChannel(channel, fetchSize);\n            pos += buf.remaining();\n        } while (buf.hasRemaining());\n\n        written = out.position() - written;\n        if (written > 0 && curMarker >= 0x100 && curMarker <= 0x1ff)\n            return State.DONE;\n\n        for (; bytesInMarker > 0 && out.hasRemaining();) {\n            out.put((byte) (curMarker >>> 24));\n            curMarker = (curMarker << 8);\n            --bytesInMarker;\n            if (curMarker >= 0x100 && curMarker <= 0x1ff)\n                return State.DONE;\n        }\n\n        if (bytesInMarker == 0) {\n            done = true;\n            return State.STOP;\n        } else {\n            return State.MORE_DATA;\n        }\n    }", "code_tokens": ["public", "final", "State", "readToNextMarkerPartial", "(", "ByteBuffer", "out", ")", "throws", "IOException", "{", "if", "(", "done", ")", "return", "State", ".", "STOP", ";", "int", "skipOneMarker", "=", "curMarker", ">=", "0x100", "&&", "curMarker", "<=", "0x1ff", "?", "1", ":", "0", ";", "int", "written", "=", "out", ".", "position", "(", ")", ";", "do", "{", "while", "(", "buf", ".", "hasRemaining", "(", ")", ")", "{", "if", "(", "curMarker", ">=", "0x100", "&&", "curMarker", "<=", "0x1ff", ")", "{", "if", "(", "skipOneMarker", "==", "0", ")", "{", "return", "State", ".", "DONE", ";", "}", "--", "skipOneMarker", ";", "}", "if", "(", "!", "out", ".", "hasRemaining", "(", ")", ")", "return", "State", ".", "MORE_DATA", ";", "out", ".", "put", "(", "(", "byte", ")", "(", "curMarker", ">>>", "24", ")", ")", ";", "curMarker", "=", "(", "curMarker", "<<", "8", ")", "|", "(", "buf", ".", "get", "(", ")", "&", "0xff", ")", ";", "}", "buf", "=", "NIOUtils", ".", "fetchFromChannel", "(", "channel", ",", "fetchSize", ")", ";", "pos", "+=", "buf", ".", "remaining", "(", ")", ";", "}", "while", "(", "buf", ".", "hasRemaining", "(", ")", ")", ";", "written", "=", "out", ".", "position", "(", ")", "-", "written", ";", "if", "(", "written", ">", "0", "&&", "curMarker", ">=", "0x100", "&&", "curMarker", "<=", "0x1ff", ")", "return", "State", ".", "DONE", ";", "for", "(", ";", "bytesInMarker", ">", "0", "&&", "out", ".", "hasRemaining", "(", ")", ";", ")", "{", "out", ".", "put", "(", "(", "byte", ")", "(", "curMarker", ">>>", "24", ")", ")", ";", "curMarker", "=", "(", "curMarker", "<<", "8", ")", ";", "--", "bytesInMarker", ";", "if", "(", "curMarker", ">=", "0x100", "&&", "curMarker", "<=", "0x1ff", ")", "return", "State", ".", "DONE", ";", "}", "if", "(", "bytesInMarker", "==", "0", ")", "{", "done", "=", "true", ";", "return", "State", ".", "STOP", ";", "}", "else", "{", "return", "State", ".", "MORE_DATA", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "cd6efa51ef05f409a8ba8cfb7521f4b4f10ccc75", "url": "https://github.com/jcodec/jcodec/blob/cd6efa51ef05f409a8ba8cfb7521f4b4f10ccc75/src/main/java/org/jcodec/codecs/mpeg12/SegmentReader.java#L67-L107", "partition": "test"}
{"repo": "ldp4j/ldp4j", "path": "framework/application/api/src/main/java/org/ldp4j/application/ApplicationContext.java", "func_name": "ApplicationContext.createSession", "original_string": "public synchronized WriteSession createSession() throws ApplicationContextException {\n\t\tif(this.threadSession.containsKey(Thread.currentThread().getId())) {\n\t\t\tthrow failure(\"Thread already has an active session\");\n\t\t}\n\n\t\tif(this.delegate.isOffline()) {\n\t\t\tthrow failure(\"The Application Engine is off-line\");\n\t\t}\n\n\t\tWriteSession nativeSession=this.delegate.createSession();\n\t\tif(nativeSession==null) {\n\t\t\tthrow failure(\"Could not create native write session\");\n\t\t}\n\n\t\tsetUpWriteSessionCleaner();\n\n\t\treturn\n\t\t\ttrackSession(\n\t\t\t\tnew ContextWriteSessionState(\n\t\t\t\t\tnativeSession,\n\t\t\t\t\tnew CleanerContextWriteSessionStateListener()));\n\t}", "language": "java", "code": "public synchronized WriteSession createSession() throws ApplicationContextException {\n\t\tif(this.threadSession.containsKey(Thread.currentThread().getId())) {\n\t\t\tthrow failure(\"Thread already has an active session\");\n\t\t}\n\n\t\tif(this.delegate.isOffline()) {\n\t\t\tthrow failure(\"The Application Engine is off-line\");\n\t\t}\n\n\t\tWriteSession nativeSession=this.delegate.createSession();\n\t\tif(nativeSession==null) {\n\t\t\tthrow failure(\"Could not create native write session\");\n\t\t}\n\n\t\tsetUpWriteSessionCleaner();\n\n\t\treturn\n\t\t\ttrackSession(\n\t\t\t\tnew ContextWriteSessionState(\n\t\t\t\t\tnativeSession,\n\t\t\t\t\tnew CleanerContextWriteSessionStateListener()));\n\t}", "code_tokens": ["public", "synchronized", "WriteSession", "createSession", "(", ")", "throws", "ApplicationContextException", "{", "if", "(", "this", ".", "threadSession", ".", "containsKey", "(", "Thread", ".", "currentThread", "(", ")", ".", "getId", "(", ")", ")", ")", "{", "throw", "failure", "(", "\"Thread already has an active session\"", ")", ";", "}", "if", "(", "this", ".", "delegate", ".", "isOffline", "(", ")", ")", "{", "throw", "failure", "(", "\"The Application Engine is off-line\"", ")", ";", "}", "WriteSession", "nativeSession", "=", "this", ".", "delegate", ".", "createSession", "(", ")", ";", "if", "(", "nativeSession", "==", "null", ")", "{", "throw", "failure", "(", "\"Could not create native write session\"", ")", ";", "}", "setUpWriteSessionCleaner", "(", ")", ";", "return", "trackSession", "(", "new", "ContextWriteSessionState", "(", "nativeSession", ",", "new", "CleanerContextWriteSessionStateListener", "(", ")", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "4236dfb3a746be390155c1056bbb5a8d4dccc49f", "url": "https://github.com/ldp4j/ldp4j/blob/4236dfb3a746be390155c1056bbb5a8d4dccc49f/framework/application/api/src/main/java/org/ldp4j/application/ApplicationContext.java#L133-L154", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/EnumMultiset.java", "func_name": "EnumMultiset.create", "original_string": "public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {\n    EnumMultiset<E> result = create(type);\n    Iterables.addAll(result, elements);\n    return result;\n  }", "language": "java", "code": "public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {\n    EnumMultiset<E> result = create(type);\n    Iterables.addAll(result, elements);\n    return result;\n  }", "code_tokens": ["public", "static", "<", "E", "extends", "Enum", "<", "E", ">", ">", "EnumMultiset", "<", "E", ">", "create", "(", "Iterable", "<", "E", ">", "elements", ",", "Class", "<", "E", ">", "type", ")", "{", "EnumMultiset", "<", "E", ">", "result", "=", "create", "(", "type", ")", ";", "Iterables", ".", "addAll", "(", "result", ",", "elements", ")", ";", "return", "result", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/EnumMultiset.java#L76-L80", "partition": "valid"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/TransactionContextImpl.java", "func_name": "TransactionContextImpl.executeAfterRollbackActions", "original_string": "protected void executeAfterRollbackActions() {\t\t\r\n\t\tif (afterRollbackActions != null) {\r\n\t\t\tif (trace) {\r\n\t\t\t\tlogger.trace(\"Executing rollback actions\");\r\n\t\t\t}\r\n\t\t\texecuteActions(afterRollbackActions,trace);\r\n\t\t\tafterRollbackActions = null;\r\n\t\t} \r\n\t}", "language": "java", "code": "protected void executeAfterRollbackActions() {\t\t\r\n\t\tif (afterRollbackActions != null) {\r\n\t\t\tif (trace) {\r\n\t\t\t\tlogger.trace(\"Executing rollback actions\");\r\n\t\t\t}\r\n\t\t\texecuteActions(afterRollbackActions,trace);\r\n\t\t\tafterRollbackActions = null;\r\n\t\t} \r\n\t}", "code_tokens": ["protected", "void", "executeAfterRollbackActions", "(", ")", "{", "if", "(", "afterRollbackActions", "!=", "null", ")", "{", "if", "(", "trace", ")", "{", "logger", ".", "trace", "(", "\"Executing rollback actions\"", ")", ";", "}", "executeActions", "(", "afterRollbackActions", ",", "trace", ")", ";", "afterRollbackActions", "=", "null", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/TransactionContextImpl.java#L199-L207", "partition": "test"}
{"repo": "eiichiro/ash", "path": "ash-java/src/main/java/org/eiichiro/ash/Shell.java", "func_name": "Shell.unregister", "original_string": "public void unregister(String name) {\n\t\tPreconditions.checkArgument(name != null && !name.isEmpty(), \"Parameter 'name' must not be [\" + name + \"]\");\n\t\tcommands.remove(name);\n\t}", "language": "java", "code": "public void unregister(String name) {\n\t\tPreconditions.checkArgument(name != null && !name.isEmpty(), \"Parameter 'name' must not be [\" + name + \"]\");\n\t\tcommands.remove(name);\n\t}", "code_tokens": ["public", "void", "unregister", "(", "String", "name", ")", "{", "Preconditions", ".", "checkArgument", "(", "name", "!=", "null", "&&", "!", "name", ".", "isEmpty", "(", ")", ",", "\"Parameter 'name' must not be [\"", "+", "name", "+", "\"]\"", ")", ";", "commands", ".", "remove", "(", "name", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "6c4d98761ced829e625f81f884cbc5c613bb6cde", "url": "https://github.com/eiichiro/ash/blob/6c4d98761ced829e625f81f884cbc5c613bb6cde/ash-java/src/main/java/org/eiichiro/ash/Shell.java#L77-L80", "partition": "valid"}
{"repo": "Koekiebox-PTY-LTD/Fluid", "path": "fluid-api/src/main/java/com/fluidbpm/program/api/vo/ABaseListing.java", "func_name": "ABaseListing.toJsonObject", "original_string": "@Override\n    @XmlTransient\n    public JSONObject toJsonObject() throws JSONException {\n\n        JSONObject returnVal = super.toJsonObject();\n\n        //Listing...\n        int listingCountFromListing = 0;\n        if(this.getListing() != null && !this.getListing().isEmpty())\n        {\n            JSONArray jsonArray = new JSONArray();\n            listingCountFromListing = this.getListing().size();\n            for(T toAdd :this.getListing())\n            {\n                jsonArray.put(toAdd.toJsonObject());\n            }\n\n            returnVal.put(JSONMapping.LISTING, jsonArray);\n        }\n\n        //Listing count...\n        if(this.getListingCount() == null)\n        {\n            returnVal.put(JSONMapping.LISTING_COUNT, new Integer(listingCountFromListing));\n        }\n        else\n        {\n            returnVal.put(JSONMapping.LISTING_COUNT, this.getListingCount());\n        }\n\n        //Listing index...\n        if(this.getListingIndex() != null)\n        {\n            returnVal.put(JSONMapping.LISTING_INDEX, this.getListingIndex());\n        }\n\n        //Listing page...\n        if(this.getListingIndex() != null)\n        {\n            returnVal.put(JSONMapping.LISTING_PAGE, this.getListingPage());\n        }\n\n        return returnVal;\n    }", "language": "java", "code": "@Override\n    @XmlTransient\n    public JSONObject toJsonObject() throws JSONException {\n\n        JSONObject returnVal = super.toJsonObject();\n\n        //Listing...\n        int listingCountFromListing = 0;\n        if(this.getListing() != null && !this.getListing().isEmpty())\n        {\n            JSONArray jsonArray = new JSONArray();\n            listingCountFromListing = this.getListing().size();\n            for(T toAdd :this.getListing())\n            {\n                jsonArray.put(toAdd.toJsonObject());\n            }\n\n            returnVal.put(JSONMapping.LISTING, jsonArray);\n        }\n\n        //Listing count...\n        if(this.getListingCount() == null)\n        {\n            returnVal.put(JSONMapping.LISTING_COUNT, new Integer(listingCountFromListing));\n        }\n        else\n        {\n            returnVal.put(JSONMapping.LISTING_COUNT, this.getListingCount());\n        }\n\n        //Listing index...\n        if(this.getListingIndex() != null)\n        {\n            returnVal.put(JSONMapping.LISTING_INDEX, this.getListingIndex());\n        }\n\n        //Listing page...\n        if(this.getListingIndex() != null)\n        {\n            returnVal.put(JSONMapping.LISTING_PAGE, this.getListingPage());\n        }\n\n        return returnVal;\n    }", "code_tokens": ["@", "Override", "@", "XmlTransient", "public", "JSONObject", "toJsonObject", "(", ")", "throws", "JSONException", "{", "JSONObject", "returnVal", "=", "super", ".", "toJsonObject", "(", ")", ";", "//Listing...", "int", "listingCountFromListing", "=", "0", ";", "if", "(", "this", ".", "getListing", "(", ")", "!=", "null", "&&", "!", "this", ".", "getListing", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "JSONArray", "jsonArray", "=", "new", "JSONArray", "(", ")", ";", "listingCountFromListing", "=", "this", ".", "getListing", "(", ")", ".", "size", "(", ")", ";", "for", "(", "T", "toAdd", ":", "this", ".", "getListing", "(", ")", ")", "{", "jsonArray", ".", "put", "(", "toAdd", ".", "toJsonObject", "(", ")", ")", ";", "}", "returnVal", ".", "put", "(", "JSONMapping", ".", "LISTING", ",", "jsonArray", ")", ";", "}", "//Listing count...", "if", "(", "this", ".", "getListingCount", "(", ")", "==", "null", ")", "{", "returnVal", ".", "put", "(", "JSONMapping", ".", "LISTING_COUNT", ",", "new", "Integer", "(", "listingCountFromListing", ")", ")", ";", "}", "else", "{", "returnVal", ".", "put", "(", "JSONMapping", ".", "LISTING_COUNT", ",", "this", ".", "getListingCount", "(", ")", ")", ";", "}", "//Listing index...", "if", "(", "this", ".", "getListingIndex", "(", ")", "!=", "null", ")", "{", "returnVal", ".", "put", "(", "JSONMapping", ".", "LISTING_INDEX", ",", "this", ".", "getListingIndex", "(", ")", ")", ";", "}", "//Listing page...", "if", "(", "this", ".", "getListingIndex", "(", ")", "!=", "null", ")", "{", "returnVal", ".", "put", "(", "JSONMapping", ".", "LISTING_PAGE", ",", "this", ".", "getListingPage", "(", ")", ")", ";", "}", "return", "returnVal", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "81153d865f71b84ca933532c7115717bc3979270", "url": "https://github.com/Koekiebox-PTY-LTD/Fluid/blob/81153d865f71b84ca933532c7115717bc3979270/fluid-api/src/main/java/com/fluidbpm/program/api/vo/ABaseListing.java#L202-L245", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-core/src/main/java/jodd/util/ClassUtil.java", "func_name": "ClassUtil.isBeanProperty", "original_string": "public static boolean isBeanProperty(final Method method) {\n\t\tif (isObjectMethod(method)) {\n\t\t\treturn false;\n\t\t}\n\t\tString methodName = method.getName();\n\t\tClass returnType = method.getReturnType();\n\t\tClass[] paramTypes =  method.getParameterTypes();\n\t\tif (methodName.startsWith(METHOD_GET_PREFIX)) {\t\t// getter method must starts with 'get' and it is not getClass()\n\t\t\tif ((returnType != null) && (paramTypes.length == 0)) {\t// getter must have a return type and no arguments\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (methodName.startsWith(METHOD_IS_PREFIX)) {\t\t    // ister must starts with 'is'\n\t\t\tif ((returnType != null)  && (paramTypes.length == 0)) {\t// ister must have return type and no arguments\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (methodName.startsWith(METHOD_SET_PREFIX)) {\t// setter must start with a 'set'\n\t\t\tif (paramTypes.length == 1) {\t\t\t\t        // setter must have just one argument\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public static boolean isBeanProperty(final Method method) {\n\t\tif (isObjectMethod(method)) {\n\t\t\treturn false;\n\t\t}\n\t\tString methodName = method.getName();\n\t\tClass returnType = method.getReturnType();\n\t\tClass[] paramTypes =  method.getParameterTypes();\n\t\tif (methodName.startsWith(METHOD_GET_PREFIX)) {\t\t// getter method must starts with 'get' and it is not getClass()\n\t\t\tif ((returnType != null) && (paramTypes.length == 0)) {\t// getter must have a return type and no arguments\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (methodName.startsWith(METHOD_IS_PREFIX)) {\t\t    // ister must starts with 'is'\n\t\t\tif ((returnType != null)  && (paramTypes.length == 0)) {\t// ister must have return type and no arguments\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (methodName.startsWith(METHOD_SET_PREFIX)) {\t// setter must start with a 'set'\n\t\t\tif (paramTypes.length == 1) {\t\t\t\t        // setter must have just one argument\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "static", "boolean", "isBeanProperty", "(", "final", "Method", "method", ")", "{", "if", "(", "isObjectMethod", "(", "method", ")", ")", "{", "return", "false", ";", "}", "String", "methodName", "=", "method", ".", "getName", "(", ")", ";", "Class", "returnType", "=", "method", ".", "getReturnType", "(", ")", ";", "Class", "[", "]", "paramTypes", "=", "method", ".", "getParameterTypes", "(", ")", ";", "if", "(", "methodName", ".", "startsWith", "(", "METHOD_GET_PREFIX", ")", ")", "{", "// getter method must starts with 'get' and it is not getClass()", "if", "(", "(", "returnType", "!=", "null", ")", "&&", "(", "paramTypes", ".", "length", "==", "0", ")", ")", "{", "// getter must have a return type and no arguments", "return", "true", ";", "}", "}", "else", "if", "(", "methodName", ".", "startsWith", "(", "METHOD_IS_PREFIX", ")", ")", "{", "// ister must starts with 'is'", "if", "(", "(", "returnType", "!=", "null", ")", "&&", "(", "paramTypes", ".", "length", "==", "0", ")", ")", "{", "// ister must have return type and no arguments", "return", "true", ";", "}", "}", "else", "if", "(", "methodName", ".", "startsWith", "(", "METHOD_SET_PREFIX", ")", ")", "{", "// setter must start with a 'set'", "if", "(", "paramTypes", ".", "length", "==", "1", ")", "{", "// setter must have just one argument", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-core/src/main/java/jodd/util/ClassUtil.java#L712-L733", "partition": "test"}
{"repo": "google/safe-html-types", "path": "types/src/main/java/com/google/common/html/types/SafeScripts.java", "func_name": "SafeScripts.fromConstant", "original_string": "public static SafeScript fromConstant(@CompileTimeConstant final String script) {\n    if (script.length() == 0) {\n      return SafeScript.EMPTY;\n    }\n    return create(script);\n  }", "language": "java", "code": "public static SafeScript fromConstant(@CompileTimeConstant final String script) {\n    if (script.length() == 0) {\n      return SafeScript.EMPTY;\n    }\n    return create(script);\n  }", "code_tokens": ["public", "static", "SafeScript", "fromConstant", "(", "@", "CompileTimeConstant", "final", "String", "script", ")", "{", "if", "(", "script", ".", "length", "(", ")", "==", "0", ")", "{", "return", "SafeScript", ".", "EMPTY", ";", "}", "return", "create", "(", "script", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "8507735457ea41a37dfa027fb176d49d5783c4ba", "url": "https://github.com/google/safe-html-types/blob/8507735457ea41a37dfa027fb176d49d5783c4ba/types/src/main/java/com/google/common/html/types/SafeScripts.java#L44-L49", "partition": "valid"}
{"repo": "deib-polimi/SPF2", "path": "sPFFramework/src/main/java/it/polimi/spf/framework/local/SPFService.java", "func_name": "SPFService.startForeground", "original_string": "public static void startForeground(Context c) {\n        Intent i = new Intent(c, SPFService.class);\n        i.setAction(ACTION_START_FOREGROUND);\n        c.startService(i);\n    }", "language": "java", "code": "public static void startForeground(Context c) {\n        Intent i = new Intent(c, SPFService.class);\n        i.setAction(ACTION_START_FOREGROUND);\n        c.startService(i);\n    }", "code_tokens": ["public", "static", "void", "startForeground", "(", "Context", "c", ")", "{", "Intent", "i", "=", "new", "Intent", "(", "c", ",", "SPFService", ".", "class", ")", ";", "i", ".", "setAction", "(", "ACTION_START_FOREGROUND", ")", ";", "c", ".", "startService", "(", "i", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "c5a856ab29116a671fe9bef7035f3efb605dc2a1", "url": "https://github.com/deib-polimi/SPF2/blob/c5a856ab29116a671fe9bef7035f3efb605dc2a1/sPFFramework/src/main/java/it/polimi/spf/framework/local/SPFService.java#L69-L73", "partition": "valid"}
{"repo": "Netflix/archaius", "path": "archaius-core/src/main/java/com/netflix/config/ConfigurationBasedDeploymentContext.java", "func_name": "ConfigurationBasedDeploymentContext.getDeploymentServerId", "original_string": "@Override\n    public String getDeploymentServerId() {\n        String value = getValueFromConfig(DeploymentContext.ContextKey.serverId.getKey());\n        if (value != null) {\n            return value;\n        } else {\n            value = getValueFromConfig(DEPLOYMENT_SERVER_ID_PROPERTY);\n        }\n        if (value != null) {\n            return value;\n        } else {\n            return super.getDeploymentServerId();\n        }\n    }", "language": "java", "code": "@Override\n    public String getDeploymentServerId() {\n        String value = getValueFromConfig(DeploymentContext.ContextKey.serverId.getKey());\n        if (value != null) {\n            return value;\n        } else {\n            value = getValueFromConfig(DEPLOYMENT_SERVER_ID_PROPERTY);\n        }\n        if (value != null) {\n            return value;\n        } else {\n            return super.getDeploymentServerId();\n        }\n    }", "code_tokens": ["@", "Override", "public", "String", "getDeploymentServerId", "(", ")", "{", "String", "value", "=", "getValueFromConfig", "(", "DeploymentContext", ".", "ContextKey", ".", "serverId", ".", "getKey", "(", ")", ")", ";", "if", "(", "value", "!=", "null", ")", "{", "return", "value", ";", "}", "else", "{", "value", "=", "getValueFromConfig", "(", "DEPLOYMENT_SERVER_ID_PROPERTY", ")", ";", "}", "if", "(", "value", "!=", "null", ")", "{", "return", "value", ";", "}", "else", "{", "return", "super", ".", "getDeploymentServerId", "(", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "2c4b0006fdea3b65ad98f6d9dd354a09c8c4ffdd", "url": "https://github.com/Netflix/archaius/blob/2c4b0006fdea3b65ad98f6d9dd354a09c8c4ffdd/archaius-core/src/main/java/com/netflix/config/ConfigurationBasedDeploymentContext.java#L235-L248", "partition": "valid"}
{"repo": "schaloner/deadbolt-2-java", "path": "code/app/be/objectify/deadbolt/java/utils/TemplateUtils.java", "func_name": "TemplateUtils.roles", "original_string": "public static String[] roles(final Role... roles)\n    {\n        final List<String> names = new ArrayList<>(roles.length);\n        for (Role role : roles)\n        {\n            names.add(role.getName());\n        }\n        return names.toArray(new String[names.size()]);\n    }", "language": "java", "code": "public static String[] roles(final Role... roles)\n    {\n        final List<String> names = new ArrayList<>(roles.length);\n        for (Role role : roles)\n        {\n            names.add(role.getName());\n        }\n        return names.toArray(new String[names.size()]);\n    }", "code_tokens": ["public", "static", "String", "[", "]", "roles", "(", "final", "Role", "...", "roles", ")", "{", "final", "List", "<", "String", ">", "names", "=", "new", "ArrayList", "<>", "(", "roles", ".", "length", ")", ";", "for", "(", "Role", "role", ":", "roles", ")", "{", "names", ".", "add", "(", "role", ".", "getName", "(", ")", ")", ";", "}", "return", "names", ".", "toArray", "(", "new", "String", "[", "names", ".", "size", "(", ")", "]", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "84890eb4565fb6172b7d8e824f64d547ddacfcc7", "url": "https://github.com/schaloner/deadbolt-2-java/blob/84890eb4565fb6172b7d8e824f64d547ddacfcc7/code/app/be/objectify/deadbolt/java/utils/TemplateUtils.java#L39-L47", "partition": "valid"}
{"repo": "orientechnologies/orientdb", "path": "graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientGraphQuery.java", "func_name": "OrientGraphQuery.order", "original_string": "public Query order(final String props, final String dir) {\n    this.orderBy = props;\n    this.orderByDir = dir;\n    return this;\n  }", "language": "java", "code": "public Query order(final String props, final String dir) {\n    this.orderBy = props;\n    this.orderByDir = dir;\n    return this;\n  }", "code_tokens": ["public", "Query", "order", "(", "final", "String", "props", ",", "final", "String", "dir", ")", "{", "this", ".", "orderBy", "=", "props", ";", "this", ".", "orderByDir", "=", "dir", ";", "return", "this", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientGraphQuery.java#L138-L142", "partition": "test"}
{"repo": "itfsw/mybatis-generator-plugin", "path": "src/main/java/com/itfsw/mybatis/generator/plugins/utils/JavaElementGeneratorTools.java", "func_name": "JavaElementGeneratorTools.getModelTypeWithoutBLOBs", "original_string": "public static FullyQualifiedJavaType getModelTypeWithoutBLOBs(IntrospectedTable introspectedTable) {\n        FullyQualifiedJavaType type;\n        if (introspectedTable.getRules().generateBaseRecordClass()) {\n            type = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());\n        } else if (introspectedTable.getRules().generatePrimaryKeyClass()) {\n            type = new FullyQualifiedJavaType(introspectedTable.getPrimaryKeyType());\n        } else {\n            throw new RuntimeException(getString(\"RuntimeError.12\"));\n        }\n        return type;\n    }", "language": "java", "code": "public static FullyQualifiedJavaType getModelTypeWithoutBLOBs(IntrospectedTable introspectedTable) {\n        FullyQualifiedJavaType type;\n        if (introspectedTable.getRules().generateBaseRecordClass()) {\n            type = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());\n        } else if (introspectedTable.getRules().generatePrimaryKeyClass()) {\n            type = new FullyQualifiedJavaType(introspectedTable.getPrimaryKeyType());\n        } else {\n            throw new RuntimeException(getString(\"RuntimeError.12\"));\n        }\n        return type;\n    }", "code_tokens": ["public", "static", "FullyQualifiedJavaType", "getModelTypeWithoutBLOBs", "(", "IntrospectedTable", "introspectedTable", ")", "{", "FullyQualifiedJavaType", "type", ";", "if", "(", "introspectedTable", ".", "getRules", "(", ")", ".", "generateBaseRecordClass", "(", ")", ")", "{", "type", "=", "new", "FullyQualifiedJavaType", "(", "introspectedTable", ".", "getBaseRecordType", "(", ")", ")", ";", "}", "else", "if", "(", "introspectedTable", ".", "getRules", "(", ")", ".", "generatePrimaryKeyClass", "(", ")", ")", "{", "type", "=", "new", "FullyQualifiedJavaType", "(", "introspectedTable", ".", "getPrimaryKeyType", "(", ")", ")", ";", "}", "else", "{", "throw", "new", "RuntimeException", "(", "getString", "(", "\"RuntimeError.12\"", ")", ")", ";", "}", "return", "type", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "c2746d9567952cabe0eed8c533beb8c1a8bc1dce", "url": "https://github.com/itfsw/mybatis-generator-plugin/blob/c2746d9567952cabe0eed8c533beb8c1a8bc1dce/src/main/java/com/itfsw/mybatis/generator/plugins/utils/JavaElementGeneratorTools.java#L139-L149", "partition": "valid"}
{"repo": "deeplearning4j/nd4j", "path": "nd4j-common/src/main/java/org/nd4j/util/StringUtils.java", "func_name": "StringUtils.stringifyException", "original_string": "public static String stringifyException(Throwable e) {\n        StringWriter stm = new StringWriter();\n        PrintWriter wrt = new PrintWriter(stm);\n        e.printStackTrace(wrt);\n        wrt.close();\n        return stm.toString();\n    }", "language": "java", "code": "public static String stringifyException(Throwable e) {\n        StringWriter stm = new StringWriter();\n        PrintWriter wrt = new PrintWriter(stm);\n        e.printStackTrace(wrt);\n        wrt.close();\n        return stm.toString();\n    }", "code_tokens": ["public", "static", "String", "stringifyException", "(", "Throwable", "e", ")", "{", "StringWriter", "stm", "=", "new", "StringWriter", "(", ")", ";", "PrintWriter", "wrt", "=", "new", "PrintWriter", "(", "stm", ")", ";", "e", ".", "printStackTrace", "(", "wrt", ")", ";", "wrt", ".", "close", "(", ")", ";", "return", "stm", ".", "toString", "(", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "8f005bcecb240d1fbb83b9d390ad801d1d3b6933", "url": "https://github.com/deeplearning4j/nd4j/blob/8f005bcecb240d1fbb83b9d390ad801d1d3b6933/nd4j-common/src/main/java/org/nd4j/util/StringUtils.java#L54-L60", "partition": "test"}
{"repo": "streamsets/datacollector", "path": "common/src/main/java/com/streamsets/pipeline/lib/parser/shaded/com/google/code/regexp/Pattern.java", "func_name": "Pattern.countOpenParens", "original_string": "static private int countOpenParens(String s, int pos) {\n        java.util.regex.Pattern p = java.util.regex.Pattern.compile(\"\\\\(\");\n        java.util.regex.Matcher m = p.matcher(s.subSequence(0, pos));\n\n        int numParens = 0;\n\n        while (m.find()) {\n            // ignore parentheses inside character classes: [0-9()a-f]\n            // which are just literals\n            if (isInsideCharClass(s, m.start())) {\n                continue;\n            }\n\n            // ignore escaped parens\n            if (isEscapedChar(s, m.start())) continue;\n\n            if (!isNoncapturingParen(s, m.start())) {\n                numParens++;\n            }\n        }\n        return numParens;\n    }", "language": "java", "code": "static private int countOpenParens(String s, int pos) {\n        java.util.regex.Pattern p = java.util.regex.Pattern.compile(\"\\\\(\");\n        java.util.regex.Matcher m = p.matcher(s.subSequence(0, pos));\n\n        int numParens = 0;\n\n        while (m.find()) {\n            // ignore parentheses inside character classes: [0-9()a-f]\n            // which are just literals\n            if (isInsideCharClass(s, m.start())) {\n                continue;\n            }\n\n            // ignore escaped parens\n            if (isEscapedChar(s, m.start())) continue;\n\n            if (!isNoncapturingParen(s, m.start())) {\n                numParens++;\n            }\n        }\n        return numParens;\n    }", "code_tokens": ["static", "private", "int", "countOpenParens", "(", "String", "s", ",", "int", "pos", ")", "{", "java", ".", "util", ".", "regex", ".", "Pattern", "p", "=", "java", ".", "util", ".", "regex", ".", "Pattern", ".", "compile", "(", "\"\\\\(\"", ")", ";", "java", ".", "util", ".", "regex", ".", "Matcher", "m", "=", "p", ".", "matcher", "(", "s", ".", "subSequence", "(", "0", ",", "pos", ")", ")", ";", "int", "numParens", "=", "0", ";", "while", "(", "m", ".", "find", "(", ")", ")", "{", "// ignore parentheses inside character classes: [0-9()a-f]", "// which are just literals", "if", "(", "isInsideCharClass", "(", "s", ",", "m", ".", "start", "(", ")", ")", ")", "{", "continue", ";", "}", "// ignore escaped parens", "if", "(", "isEscapedChar", "(", "s", ",", "m", ".", "start", "(", ")", ")", ")", "continue", ";", "if", "(", "!", "isNoncapturingParen", "(", "s", ",", "m", ".", "start", "(", ")", ")", ")", "{", "numParens", "++", ";", "}", "}", "return", "numParens", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ea63245ea14d59d5229248387f0628f46131eae5", "url": "https://github.com/streamsets/datacollector/blob/ea63245ea14d59d5229248387f0628f46131eae5/common/src/main/java/com/streamsets/pipeline/lib/parser/shaded/com/google/code/regexp/Pattern.java#L431-L452", "partition": "test"}
{"repo": "Netflix/archaius", "path": "archaius-core/src/main/java/com/netflix/config/ConfigurationWithPollingSource.java", "func_name": "ConfigurationWithPollingSource.getBigInteger", "original_string": "@Override\n    public BigInteger getBigInteger(String key, BigInteger defaultValue) {\n        return config.getBigInteger(key, defaultValue);\n    }", "language": "java", "code": "@Override\n    public BigInteger getBigInteger(String key, BigInteger defaultValue) {\n        return config.getBigInteger(key, defaultValue);\n    }", "code_tokens": ["@", "Override", "public", "BigInteger", "getBigInteger", "(", "String", "key", ",", "BigInteger", "defaultValue", ")", "{", "return", "config", ".", "getBigInteger", "(", "key", ",", "defaultValue", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "2c4b0006fdea3b65ad98f6d9dd354a09c8c4ffdd", "url": "https://github.com/Netflix/archaius/blob/2c4b0006fdea3b65ad98f6d9dd354a09c8c4ffdd/archaius-core/src/main/java/com/netflix/config/ConfigurationWithPollingSource.java#L119-L122", "partition": "valid"}
{"repo": "pnerg/java-scala-util", "path": "src/main/java/javascalautils/concurrent/FutureImpl.java", "func_name": "FutureImpl.onFailure", "original_string": "@Override\n    public void onFailure(Consumer<Throwable> consumer) {\n        Validator.requireNonNull(consumer, \"Null is not a valid consumer\");\n        // register a complete handler and ignore any Success responses\n        onComplete(result -> {\n            // transform Failure to a Success with the Throwable\n            // should it be a Success it will be transformed into a Failure and forEach will do nothing\n            result.failed().forEach(consumer);\n        });\n    }", "language": "java", "code": "@Override\n    public void onFailure(Consumer<Throwable> consumer) {\n        Validator.requireNonNull(consumer, \"Null is not a valid consumer\");\n        // register a complete handler and ignore any Success responses\n        onComplete(result -> {\n            // transform Failure to a Success with the Throwable\n            // should it be a Success it will be transformed into a Failure and forEach will do nothing\n            result.failed().forEach(consumer);\n        });\n    }", "code_tokens": ["@", "Override", "public", "void", "onFailure", "(", "Consumer", "<", "Throwable", ">", "consumer", ")", "{", "Validator", ".", "requireNonNull", "(", "consumer", ",", "\"Null is not a valid consumer\"", ")", ";", "// register a complete handler and ignore any Success responses", "onComplete", "(", "result", "->", "{", "// transform Failure to a Success with the Throwable", "// should it be a Success it will be transformed into a Failure and forEach will do nothing", "result", ".", "failed", "(", ")", ".", "forEach", "(", "consumer", ")", ";", "}", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "7823aa9ab3fb5091c233b3605c53050de37db61d", "url": "https://github.com/pnerg/java-scala-util/blob/7823aa9ab3fb5091c233b3605c53050de37db61d/src/main/java/javascalautils/concurrent/FutureImpl.java#L75-L84", "partition": "valid"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/subjects/BehaviorSubject.java", "func_name": "BehaviorSubject.getValues", "original_string": "@Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public T[] getValues(T[] array) {\n        Object o = value.get();\n        if (o == null || NotificationLite.isComplete(o) || NotificationLite.isError(o)) {\n            if (array.length != 0) {\n                array[0] = null;\n            }\n            return array;\n        }\n        T v = NotificationLite.getValue(o);\n        if (array.length != 0) {\n            array[0] = v;\n            if (array.length != 1) {\n                array[1] = null;\n            }\n        } else {\n            array = (T[])Array.newInstance(array.getClass().getComponentType(), 1);\n            array[0] = v;\n        }\n        return array;\n    }", "language": "java", "code": "@Deprecated\n    @SuppressWarnings(\"unchecked\")\n    public T[] getValues(T[] array) {\n        Object o = value.get();\n        if (o == null || NotificationLite.isComplete(o) || NotificationLite.isError(o)) {\n            if (array.length != 0) {\n                array[0] = null;\n            }\n            return array;\n        }\n        T v = NotificationLite.getValue(o);\n        if (array.length != 0) {\n            array[0] = v;\n            if (array.length != 1) {\n                array[1] = null;\n            }\n        } else {\n            array = (T[])Array.newInstance(array.getClass().getComponentType(), 1);\n            array[0] = v;\n        }\n        return array;\n    }", "code_tokens": ["@", "Deprecated", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "T", "[", "]", "getValues", "(", "T", "[", "]", "array", ")", "{", "Object", "o", "=", "value", ".", "get", "(", ")", ";", "if", "(", "o", "==", "null", "||", "NotificationLite", ".", "isComplete", "(", "o", ")", "||", "NotificationLite", ".", "isError", "(", "o", ")", ")", "{", "if", "(", "array", ".", "length", "!=", "0", ")", "{", "array", "[", "0", "]", "=", "null", ";", "}", "return", "array", ";", "}", "T", "v", "=", "NotificationLite", ".", "getValue", "(", "o", ")", ";", "if", "(", "array", ".", "length", "!=", "0", ")", "{", "array", "[", "0", "]", "=", "v", ";", "if", "(", "array", ".", "length", "!=", "1", ")", "{", "array", "[", "1", "]", "=", "null", ";", "}", "}", "else", "{", "array", "=", "(", "T", "[", "]", ")", "Array", ".", "newInstance", "(", "array", ".", "getClass", "(", ")", ".", "getComponentType", "(", ")", ",", "1", ")", ";", "array", "[", "0", "]", "=", "v", ";", "}", "return", "array", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/subjects/BehaviorSubject.java#L356-L377", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/util/EscapeStrings.java", "func_name": "EscapeStrings.urlDecode", "original_string": "public static String urlDecode(String s) {\n    try {\n      //s = unescapeString(s, _URIEscape, \"\", false);\n      s = URLDecoder.decode(s, \"UTF-8\");\n    } catch (Exception e) {\n      s = null;\n    }\n    return s;\n  }", "language": "java", "code": "public static String urlDecode(String s) {\n    try {\n      //s = unescapeString(s, _URIEscape, \"\", false);\n      s = URLDecoder.decode(s, \"UTF-8\");\n    } catch (Exception e) {\n      s = null;\n    }\n    return s;\n  }", "code_tokens": ["public", "static", "String", "urlDecode", "(", "String", "s", ")", "{", "try", "{", "//s = unescapeString(s, _URIEscape, \"\", false);", "s", "=", "URLDecoder", ".", "decode", "(", "s", ",", "\"UTF-8\"", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "s", "=", "null", ";", "}", "return", "s", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/util/EscapeStrings.java#L291-L299", "partition": "test"}
{"repo": "jkuhnert/ognl", "path": "src/main/java/ognl/OgnlOps.java", "func_name": "OgnlOps.getIntValue", "original_string": "public static int getIntValue(Object value)\n    {\n        try\n        {\n            if (value == null)\n                return -1;\n\n            if (Number.class.isInstance(value)) {\n\n                return ((Number)value).intValue();\n            }\n\n            String str = String.class.isInstance(value) ? (String)value : value.toString();\n            \n            return Integer.parseInt(str);\n        }\n        catch (Throwable t)\n        {\n            throw new RuntimeException(\"Error converting \" + value + \" to integer:\", t);\n        }\n    }", "language": "java", "code": "public static int getIntValue(Object value)\n    {\n        try\n        {\n            if (value == null)\n                return -1;\n\n            if (Number.class.isInstance(value)) {\n\n                return ((Number)value).intValue();\n            }\n\n            String str = String.class.isInstance(value) ? (String)value : value.toString();\n            \n            return Integer.parseInt(str);\n        }\n        catch (Throwable t)\n        {\n            throw new RuntimeException(\"Error converting \" + value + \" to integer:\", t);\n        }\n    }", "code_tokens": ["public", "static", "int", "getIntValue", "(", "Object", "value", ")", "{", "try", "{", "if", "(", "value", "==", "null", ")", "return", "-", "1", ";", "if", "(", "Number", ".", "class", ".", "isInstance", "(", "value", ")", ")", "{", "return", "(", "(", "Number", ")", "value", ")", ".", "intValue", "(", ")", ";", "}", "String", "str", "=", "String", ".", "class", ".", "isInstance", "(", "value", ")", "?", "(", "String", ")", "value", ":", "value", ".", "toString", "(", ")", ";", "return", "Integer", ".", "parseInt", "(", "str", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "throw", "new", "RuntimeException", "(", "\"Error converting \"", "+", "value", "+", "\" to integer:\"", ",", "t", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "53d51a30c8c299b750dede779d05cb84beee73c3", "url": "https://github.com/jkuhnert/ognl/blob/53d51a30c8c299b750dede779d05cb84beee73c3/src/main/java/ognl/OgnlOps.java#L635-L655", "partition": "test"}
{"repo": "lightcouch/LightCouch", "path": "src/main/java/org/lightcouch/CouchDbClientBase.java", "func_name": "CouchDbClientBase.invokeUpdateHandler", "original_string": "public String invokeUpdateHandler(String updateHandlerUri, String docId, Params params) {\n\t\tassertNotEmpty(updateHandlerUri, \"uri\");\n\t\tassertNotEmpty(docId, \"docId\");\n\t\tfinal String[] v = updateHandlerUri.split(\"/\");\n\t\tfinal String path = String.format(\"_design/%s/_update/%s/\", v[0], v[1]);\n\t\tfinal URI uri = buildUri(getDBUri()).path(path).path(docId).query(params).build();\n\t\tfinal HttpResponse response = executeRequest(new HttpPut(uri));\n\t\treturn streamToString(getStream(response));\n\t}", "language": "java", "code": "public String invokeUpdateHandler(String updateHandlerUri, String docId, Params params) {\n\t\tassertNotEmpty(updateHandlerUri, \"uri\");\n\t\tassertNotEmpty(docId, \"docId\");\n\t\tfinal String[] v = updateHandlerUri.split(\"/\");\n\t\tfinal String path = String.format(\"_design/%s/_update/%s/\", v[0], v[1]);\n\t\tfinal URI uri = buildUri(getDBUri()).path(path).path(docId).query(params).build();\n\t\tfinal HttpResponse response = executeRequest(new HttpPut(uri));\n\t\treturn streamToString(getStream(response));\n\t}", "code_tokens": ["public", "String", "invokeUpdateHandler", "(", "String", "updateHandlerUri", ",", "String", "docId", ",", "Params", "params", ")", "{", "assertNotEmpty", "(", "updateHandlerUri", ",", "\"uri\"", ")", ";", "assertNotEmpty", "(", "docId", ",", "\"docId\"", ")", ";", "final", "String", "[", "]", "v", "=", "updateHandlerUri", ".", "split", "(", "\"/\"", ")", ";", "final", "String", "path", "=", "String", ".", "format", "(", "\"_design/%s/_update/%s/\"", ",", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ";", "final", "URI", "uri", "=", "buildUri", "(", "getDBUri", "(", ")", ")", ".", "path", "(", "path", ")", ".", "path", "(", "docId", ")", ".", "query", "(", "params", ")", ".", "build", "(", ")", ";", "final", "HttpResponse", "response", "=", "executeRequest", "(", "new", "HttpPut", "(", "uri", ")", ")", ";", "return", "streamToString", "(", "getStream", "(", "response", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "9646889503475e862fd2158487e1cdd805447f4a", "url": "https://github.com/lightcouch/LightCouch/blob/9646889503475e862fd2158487e1cdd805447f4a/src/main/java/org/lightcouch/CouchDbClientBase.java#L462-L470", "partition": "test"}
{"repo": "nyla-solutions/gedi-geode", "path": "gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/operations/stats/BitSeries.java", "func_name": "BitSeries.getMemoryUsed", "original_string": "protected int getMemoryUsed() {\n\t      int result = 4 + 8 + 8 + 8 + 4 + 4 + 4;\n\t      if (intervals != null) {\n\t        result += 4 * intervals.length;\n\t        for (int i = 0; i <= intervalIdx; i++) {\n\t          result += intervals[i].getMemoryUsed();\n\t        }\n\t      }\n\t      return result;\n\t    }", "language": "java", "code": "protected int getMemoryUsed() {\n\t      int result = 4 + 8 + 8 + 8 + 4 + 4 + 4;\n\t      if (intervals != null) {\n\t        result += 4 * intervals.length;\n\t        for (int i = 0; i <= intervalIdx; i++) {\n\t          result += intervals[i].getMemoryUsed();\n\t        }\n\t      }\n\t      return result;\n\t    }", "code_tokens": ["protected", "int", "getMemoryUsed", "(", ")", "{", "int", "result", "=", "4", "+", "8", "+", "8", "+", "8", "+", "4", "+", "4", "+", "4", ";", "if", "(", "intervals", "!=", "null", ")", "{", "result", "+=", "4", "*", "intervals", ".", "length", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<=", "intervalIdx", ";", "i", "++", ")", "{", "result", "+=", "intervals", "[", "i", "]", ".", "getMemoryUsed", "(", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "3dd71d6e66e941ce350b306b70677ee95a7d9eee", "url": "https://github.com/nyla-solutions/gedi-geode/blob/3dd71d6e66e941ce350b306b70677ee95a7d9eee/gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/operations/stats/BitSeries.java#L20-L29", "partition": "test"}
{"repo": "chkal/criteria4jpa", "path": "src/main/java/org/criteria4jpa/CriteriaUtils.java", "func_name": "CriteriaUtils.createCriteria", "original_string": "public static Criteria createCriteria(EntityManager entityManager, \n      Class<?> persistentClass) {\n    errorIfClosed(entityManager);\n    return new CriteriaImpl( entityManager, persistentClass.getSimpleName() );\n  }", "language": "java", "code": "public static Criteria createCriteria(EntityManager entityManager, \n      Class<?> persistentClass) {\n    errorIfClosed(entityManager);\n    return new CriteriaImpl( entityManager, persistentClass.getSimpleName() );\n  }", "code_tokens": ["public", "static", "Criteria", "createCriteria", "(", "EntityManager", "entityManager", ",", "Class", "<", "?", ">", "persistentClass", ")", "{", "errorIfClosed", "(", "entityManager", ")", ";", "return", "new", "CriteriaImpl", "(", "entityManager", ",", "persistentClass", ".", "getSimpleName", "(", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "3d8d9952808be9aa7f57130d5e4fd3606dba3100", "url": "https://github.com/chkal/criteria4jpa/blob/3d8d9952808be9aa7f57130d5e4fd3606dba3100/src/main/java/org/criteria4jpa/CriteriaUtils.java#L36-L40", "partition": "valid"}
{"repo": "orientechnologies/orientdb", "path": "graphdb/src/main/java/com/orientechnologies/orient/graph/batch/OGraphBatchInsertBasic.java", "func_name": "OGraphBatchInsertBasic.end", "original_string": "public void end() {\n    final OClass vClass = db.getMetadata().getSchema().getClass(vertexClass);\n\n    try {\n\n      runningThreads = new AtomicInteger(parallel);\n      for (int i = 0; i < parallel - 1; i++) {\n        Thread t = new BatchImporterJob(i, vClass);\n        t.start();\n      }\n      Thread t = new BatchImporterJob(parallel - 1, vClass);\n      t.run();\n\n      if (runningThreads.get() > 0) {\n        synchronized (runningThreads) {\n          while (runningThreads.get() > 0) {\n            try {\n              runningThreads.wait();\n            } catch (InterruptedException e) {\n            }\n          }\n        }\n      }\n\n    } finally {\n      db.activateOnCurrentThread();\n      db.declareIntent(null);\n      db.close();\n      if (walActive)\n        OGlobalConfiguration.USE_WAL.setValue(true);\n    }\n  }", "language": "java", "code": "public void end() {\n    final OClass vClass = db.getMetadata().getSchema().getClass(vertexClass);\n\n    try {\n\n      runningThreads = new AtomicInteger(parallel);\n      for (int i = 0; i < parallel - 1; i++) {\n        Thread t = new BatchImporterJob(i, vClass);\n        t.start();\n      }\n      Thread t = new BatchImporterJob(parallel - 1, vClass);\n      t.run();\n\n      if (runningThreads.get() > 0) {\n        synchronized (runningThreads) {\n          while (runningThreads.get() > 0) {\n            try {\n              runningThreads.wait();\n            } catch (InterruptedException e) {\n            }\n          }\n        }\n      }\n\n    } finally {\n      db.activateOnCurrentThread();\n      db.declareIntent(null);\n      db.close();\n      if (walActive)\n        OGlobalConfiguration.USE_WAL.setValue(true);\n    }\n  }", "code_tokens": ["public", "void", "end", "(", ")", "{", "final", "OClass", "vClass", "=", "db", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "vertexClass", ")", ";", "try", "{", "runningThreads", "=", "new", "AtomicInteger", "(", "parallel", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "parallel", "-", "1", ";", "i", "++", ")", "{", "Thread", "t", "=", "new", "BatchImporterJob", "(", "i", ",", "vClass", ")", ";", "t", ".", "start", "(", ")", ";", "}", "Thread", "t", "=", "new", "BatchImporterJob", "(", "parallel", "-", "1", ",", "vClass", ")", ";", "t", ".", "run", "(", ")", ";", "if", "(", "runningThreads", ".", "get", "(", ")", ">", "0", ")", "{", "synchronized", "(", "runningThreads", ")", "{", "while", "(", "runningThreads", ".", "get", "(", ")", ">", "0", ")", "{", "try", "{", "runningThreads", ".", "wait", "(", ")", ";", "}", "catch", "(", "InterruptedException", "e", ")", "{", "}", "}", "}", "}", "}", "finally", "{", "db", ".", "activateOnCurrentThread", "(", ")", ";", "db", ".", "declareIntent", "(", "null", ")", ";", "db", ".", "close", "(", ")", ";", "if", "(", "walActive", ")", "OGlobalConfiguration", ".", "USE_WAL", ".", "setValue", "(", "true", ")", ";", "}", "}"], "docstring": "", "docstring_tokens": [], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/graphdb/src/main/java/com/orientechnologies/orient/graph/batch/OGraphBatchInsertBasic.java#L219-L250", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/MethodIntfHelper.java", "func_name": "MethodIntfHelper.of", "original_string": "public static MethodIntf of(final InterceptorContext invocation) {\n        //for timer invocations there is no view, so the methodInf is attached directly\n        //to the context. Otherwise we retrieve it from the invoked view\n        MethodIntf methodIntf = invocation.getPrivateData(MethodIntf.class);\n        if (methodIntf == null) {\n            final ComponentView componentView = invocation.getPrivateData(ComponentView.class);\n            if (componentView != null) {\n                methodIntf = componentView.getPrivateData(MethodIntf.class);\n            } else {\n                methodIntf = MethodIntf.BEAN;\n            }\n        }\n        return methodIntf;\n    }", "language": "java", "code": "public static MethodIntf of(final InterceptorContext invocation) {\n        //for timer invocations there is no view, so the methodInf is attached directly\n        //to the context. Otherwise we retrieve it from the invoked view\n        MethodIntf methodIntf = invocation.getPrivateData(MethodIntf.class);\n        if (methodIntf == null) {\n            final ComponentView componentView = invocation.getPrivateData(ComponentView.class);\n            if (componentView != null) {\n                methodIntf = componentView.getPrivateData(MethodIntf.class);\n            } else {\n                methodIntf = MethodIntf.BEAN;\n            }\n        }\n        return methodIntf;\n    }", "code_tokens": ["public", "static", "MethodIntf", "of", "(", "final", "InterceptorContext", "invocation", ")", "{", "//for timer invocations there is no view, so the methodInf is attached directly", "//to the context. Otherwise we retrieve it from the invoked view", "MethodIntf", "methodIntf", "=", "invocation", ".", "getPrivateData", "(", "MethodIntf", ".", "class", ")", ";", "if", "(", "methodIntf", "==", "null", ")", "{", "final", "ComponentView", "componentView", "=", "invocation", ".", "getPrivateData", "(", "ComponentView", ".", "class", ")", ";", "if", "(", "componentView", "!=", "null", ")", "{", "methodIntf", "=", "componentView", ".", "getPrivateData", "(", "MethodIntf", ".", "class", ")", ";", "}", "else", "{", "methodIntf", "=", "MethodIntf", ".", "BEAN", ";", "}", "}", "return", "methodIntf", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/MethodIntfHelper.java#L32-L45", "partition": "test"}
{"repo": "Netflix/hollow", "path": "hollow/src/main/java/com/netflix/hollow/core/memory/encoding/VarInt.java", "func_name": "VarInt.writeVLong", "original_string": "public static void writeVLong(OutputStream out, long value) throws IOException {\n        if(value < 0)                                out.write((byte)0x81);\n        if(value > 0xFFFFFFFFFFFFFFL || value < 0)   out.write((byte)(0x80 | ((value >>> 56) & 0x7FL)));\n        if(value > 0x1FFFFFFFFFFFFL || value < 0)    out.write((byte)(0x80 | ((value >>> 49) & 0x7FL)));\n        if(value > 0x3FFFFFFFFFFL || value < 0)      out.write((byte)(0x80 | ((value >>> 42) & 0x7FL)));\n        if(value > 0x7FFFFFFFFL || value < 0)        out.write((byte)(0x80 | ((value >>> 35) & 0x7FL)));\n        if(value > 0xFFFFFFFL || value < 0)          out.write((byte)(0x80 | ((value >>> 28) & 0x7FL)));\n        if(value > 0x1FFFFFL || value < 0)           out.write((byte)(0x80 | ((value >>> 21) & 0x7FL)));\n        if(value > 0x3FFFL || value < 0)             out.write((byte)(0x80 | ((value >>> 14) & 0x7FL)));\n        if(value > 0x7FL || value < 0)               out.write((byte)(0x80 | ((value >>>  7) & 0x7FL)));\n\n        out.write((byte)(value & 0x7FL));\n    }", "language": "java", "code": "public static void writeVLong(OutputStream out, long value) throws IOException {\n        if(value < 0)                                out.write((byte)0x81);\n        if(value > 0xFFFFFFFFFFFFFFL || value < 0)   out.write((byte)(0x80 | ((value >>> 56) & 0x7FL)));\n        if(value > 0x1FFFFFFFFFFFFL || value < 0)    out.write((byte)(0x80 | ((value >>> 49) & 0x7FL)));\n        if(value > 0x3FFFFFFFFFFL || value < 0)      out.write((byte)(0x80 | ((value >>> 42) & 0x7FL)));\n        if(value > 0x7FFFFFFFFL || value < 0)        out.write((byte)(0x80 | ((value >>> 35) & 0x7FL)));\n        if(value > 0xFFFFFFFL || value < 0)          out.write((byte)(0x80 | ((value >>> 28) & 0x7FL)));\n        if(value > 0x1FFFFFL || value < 0)           out.write((byte)(0x80 | ((value >>> 21) & 0x7FL)));\n        if(value > 0x3FFFL || value < 0)             out.write((byte)(0x80 | ((value >>> 14) & 0x7FL)));\n        if(value > 0x7FL || value < 0)               out.write((byte)(0x80 | ((value >>>  7) & 0x7FL)));\n\n        out.write((byte)(value & 0x7FL));\n    }", "code_tokens": ["public", "static", "void", "writeVLong", "(", "OutputStream", "out", ",", "long", "value", ")", "throws", "IOException", "{", "if", "(", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "0x81", ")", ";", "if", "(", "value", ">", "0xFFFFFFFFFFFFFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "56", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0x1FFFFFFFFFFFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "49", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0x3FFFFFFFFFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "42", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0x7FFFFFFFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "35", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0xFFFFFFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "28", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0x1FFFFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "21", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0x3FFF", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "14", ")", "&", "0x7F", "L", ")", ")", ")", ";", "if", "(", "value", ">", "0x7F", "L", "||", "value", "<", "0", ")", "out", ".", "write", "(", "(", "byte", ")", "(", "0x80", "|", "(", "(", "value", ">>>", "7", ")", "&", "0x7F", "L", ")", ")", ")", ";", "out", ".", "write", "(", "(", "byte", ")", "(", "value", "&", "0x7F", "L", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "43ca100034a01050fb764170bd32b085ac9a3c22", "url": "https://github.com/Netflix/hollow/blob/43ca100034a01050fb764170bd32b085ac9a3c22/hollow/src/main/java/com/netflix/hollow/core/memory/encoding/VarInt.java#L70-L82", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Maybe.java", "func_name": "Maybe.map", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <R> Maybe<R> map(Function<? super T, ? extends R> mapper) {\n        ObjectHelper.requireNonNull(mapper, \"mapper is null\");\n        return RxJavaPlugins.onAssembly(new MaybeMap<T, R>(this, mapper));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <R> Maybe<R> map(Function<? super T, ? extends R> mapper) {\n        ObjectHelper.requireNonNull(mapper, \"mapper is null\");\n        return RxJavaPlugins.onAssembly(new MaybeMap<T, R>(this, mapper));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "final", "<", "R", ">", "Maybe", "<", "R", ">", "map", "(", "Function", "<", "?", "super", "T", ",", "?", "extends", "R", ">", "mapper", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "mapper", ",", "\"mapper is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "MaybeMap", "<", "T", ",", "R", ">", "(", "this", ",", "mapper", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Maybe.java#L3475-L3481", "partition": "test"}
{"repo": "eclipse/packagedrone", "path": "bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/JspRuntimeContext.java", "func_name": "JspRuntimeContext.setBytecode", "original_string": "public void setBytecode(String name, byte[] bytecode) {\n        if (bytecode == null) {\n            bytecodes.remove(name);\n            bytecodeBirthTimes.remove(name);\n            return;\n        }\n        bytecodes.put(name, bytecode);\n        bytecodeBirthTimes.put(name, Long.valueOf(System.currentTimeMillis()));\n    }", "language": "java", "code": "public void setBytecode(String name, byte[] bytecode) {\n        if (bytecode == null) {\n            bytecodes.remove(name);\n            bytecodeBirthTimes.remove(name);\n            return;\n        }\n        bytecodes.put(name, bytecode);\n        bytecodeBirthTimes.put(name, Long.valueOf(System.currentTimeMillis()));\n    }", "code_tokens": ["public", "void", "setBytecode", "(", "String", "name", ",", "byte", "[", "]", "bytecode", ")", "{", "if", "(", "bytecode", "==", "null", ")", "{", "bytecodes", ".", "remove", "(", "name", ")", ";", "bytecodeBirthTimes", ".", "remove", "(", "name", ")", ";", "return", ";", "}", "bytecodes", ".", "put", "(", "name", ",", "bytecode", ")", ";", "bytecodeBirthTimes", ".", "put", "(", "name", ",", "Long", ".", "valueOf", "(", "System", ".", "currentTimeMillis", "(", ")", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "3869c1643cdc6f7cb8b26097a7b6994683b13d7e", "url": "https://github.com/eclipse/packagedrone/blob/3869c1643cdc6f7cb8b26097a7b6994683b13d7e/bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/JspRuntimeContext.java#L378-L386", "partition": "test"}
{"repo": "ocpsoft/rewrite", "path": "api/src/main/java/org/ocpsoft/rewrite/config/Perform.java", "func_name": "Perform.all", "original_string": "public static Perform all(final Operation... operations)\n   {\n      Assert.notNull(operations, \"At least one operation is required.\");\n      Assert.assertTrue(operations.length > 0, \"At least one operation is required.\");\n      return new Perform(flattenOperations(Arrays.asList(operations)).toArray(new Operation[] {}));\n   }", "language": "java", "code": "public static Perform all(final Operation... operations)\n   {\n      Assert.notNull(operations, \"At least one operation is required.\");\n      Assert.assertTrue(operations.length > 0, \"At least one operation is required.\");\n      return new Perform(flattenOperations(Arrays.asList(operations)).toArray(new Operation[] {}));\n   }", "code_tokens": ["public", "static", "Perform", "all", "(", "final", "Operation", "...", "operations", ")", "{", "Assert", ".", "notNull", "(", "operations", ",", "\"At least one operation is required.\"", ")", ";", "Assert", ".", "assertTrue", "(", "operations", ".", "length", ">", "0", ",", "\"At least one operation is required.\"", ")", ";", "return", "new", "Perform", "(", "flattenOperations", "(", "Arrays", ".", "asList", "(", "operations", ")", ")", ".", "toArray", "(", "new", "Operation", "[", "]", "{", "}", ")", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "eded0bad0101d119a3a1e67ed3f97a3bc9a8222e", "url": "https://github.com/ocpsoft/rewrite/blob/eded0bad0101d119a3a1e67ed3f97a3bc9a8222e/api/src/main/java/org/ocpsoft/rewrite/config/Perform.java#L50-L55", "partition": "valid"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/ft/point/standard/Evaluator.java", "func_name": "Evaluator.hasNetcdf3RecordStructure", "original_string": "static public boolean hasNetcdf3RecordStructure(NetcdfDataset ds) {\r\n    Variable v = ds.findVariable(\"record\");\r\n    return (v != null) && (v.getDataType() == DataType.STRUCTURE);\r\n  }", "language": "java", "code": "static public boolean hasNetcdf3RecordStructure(NetcdfDataset ds) {\r\n    Variable v = ds.findVariable(\"record\");\r\n    return (v != null) && (v.getDataType() == DataType.STRUCTURE);\r\n  }", "code_tokens": ["static", "public", "boolean", "hasNetcdf3RecordStructure", "(", "NetcdfDataset", "ds", ")", "{", "Variable", "v", "=", "ds", ".", "findVariable", "(", "\"record\"", ")", ";", "return", "(", "v", "!=", "null", ")", "&&", "(", "v", ".", "getDataType", "(", ")", "==", "DataType", ".", "STRUCTURE", ")", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/ft/point/standard/Evaluator.java#L195-L198", "partition": "test"}
{"repo": "Unidata/thredds", "path": "waterml/src/main/java/ucar/nc2/ogc/erddap/util/ErddapString2.java", "func_name": "ErddapString2.indexOf", "original_string": "public static int indexOf(char[] cArray, char c, int fromIndex) {\n        int cArrayLength = cArray.length;\n        for (int index = Math.max(fromIndex, 0); index < cArrayLength; index++) {\n            if (cArray[index] == c) \n                return index;\n        }\n        return -1;\n    }", "language": "java", "code": "public static int indexOf(char[] cArray, char c, int fromIndex) {\n        int cArrayLength = cArray.length;\n        for (int index = Math.max(fromIndex, 0); index < cArrayLength; index++) {\n            if (cArray[index] == c) \n                return index;\n        }\n        return -1;\n    }", "code_tokens": ["public", "static", "int", "indexOf", "(", "char", "[", "]", "cArray", ",", "char", "c", ",", "int", "fromIndex", ")", "{", "int", "cArrayLength", "=", "cArray", ".", "length", ";", "for", "(", "int", "index", "=", "Math", ".", "max", "(", "fromIndex", ",", "0", ")", ";", "index", "<", "cArrayLength", ";", "index", "++", ")", "{", "if", "(", "cArray", "[", "index", "]", "==", "c", ")", "return", "index", ";", "}", "return", "-", "1", ";", "}"], "docstring": "", "docstring_tokens": [], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/waterml/src/main/java/ucar/nc2/ogc/erddap/util/ErddapString2.java#L28-L35", "partition": "test"}
